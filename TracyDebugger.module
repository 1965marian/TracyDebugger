<?php

/**
 * Processwire module for running the Tracy debugger from Nette.
 * by Adrian Jones
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * A big thanks to Roland Toth (https://github.com/rolandtoth/) for the idea for this module
 * and for significant feedback, testing, and feature suggestions.
 *
 */

use Tracy\Debugger;
use Tracy\Helpers;
use Tracy\Dumper;

class TracyDebugger extends WireData implements Module, ConfigurableModule {

    /**
     * Basic information about module
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Tracy Debugger',
            'summary' => 'Tracy debugger from Nette with several PW specific custom tools.',
            'author' => 'Adrian Jones',
            'href' => 'https://processwire.com/talk/topic/12208-tracy-debugger/',
            'version' => 252,
            'autoload' => true,
            'singular' => true,
            'icon' => 'bug',
        );
    }


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();
    public static $templateVars = array();
    protected static $tracyVersion;
    public static $oncePanels;
    public static $stickyPanels;
    public static $showPanels;
    public static $templatePath;
    public static $templatePathOnce;
    public static $templatePathSticky;
    public static $templatePathPermission;
    public static $tempTemplateFilename;
    public static $panelGenerationTime = array();
    public static $hideInAdmin = array('validator', 'variables', 'templatePath', 'templateEditor');
    public static $pageHtml;
    public static $processWireInfoSections = array(
        'summary' => 'Summary',
        'templateInfo' => 'Template Info',
        'fieldsListValues' => 'Field List & Values',
        'pageObject' => 'Page Object',
        'templateObject' => 'Template Object',
        'fieldsObject' => 'Fields Object',
        'adminLinks' => 'Admin Links',
        'documentationLinks' => 'Documentation Links',
        'editLinks' => 'Edit Links'
    );
    public static $diagnosticsSections = array(
        'filesystemFolders' => 'Filesystem Folders',
        'filesystemFiles' => 'Filesystem Files',
        'mysqlInfo' => 'MySQL Info'
    );
    public static $allPanels = array(
        'console' => 'Console',
        'customPhp' => 'Custom PHP',
        'debugMode' => 'Debug Mode',
        'diagnostics' => 'Diagnostics',
        'eventInterceptor' => 'Event Interceptor',
        'mail' => 'Mail',
        'methodsInfo' => 'Methods Info',
        'outputMode' => 'Output Mode',
        'pageRecorder' => 'Page Recorder',
        'panelSelector' => 'Panel Selector',
        'performance' => 'Performance',
        'phpInfo' => 'PHP Info',
        'processwireInfo' => 'ProcessWire Info',
        'processwireLogs' => 'ProcessWire Logs',
        'processwireVersion' => 'ProcessWire Version',
        'templateEditor' => 'Template Editor',
        'templatePath' => 'Template Path',
        'todo' => 'ToDo',
        'tracyLogs' => 'Tracy Logs',
        'userSwitcher' => 'User Switcher',
        'users' => 'Users',
        'validator' => 'Validator',
        'variables' => 'Variables'
    );


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "enabled" => 1,
                "coreBranch" => version_compare(phpversion(), '5.4.4', '>=') ? 'master' : 'legacy',
                "allowLogProduction" => 1,
                "superuserForceDevelopment" => null,
                "ipAddress" => null,
                "strictMode" => null,
                "forceScream" => null,
                "outputMode" => 'detect',
                "showLocation" => array('Tracy\Dumper::LOCATION_SOURCE', 'Tracy\Dumper::LOCATION_LINK', 'Tracy\Dumper::LOCATION_CLASS'),
                "logSeverity" => array(),
                "numLogEntries" => 10,
                "maxDepth" => 3,
                "maxLength" => 150,
                "showDebugBar" => array('frontend'),
                "frontendPanels" => array('processwireInfo', 'processwireLogs', 'tracyLogs', 'methodsInfo', 'debugMode', 'templatePath', 'console', 'templateEditor', 'panelSelector'),
                "backendPanels" => array('processwireInfo', 'processwireLogs', 'tracyLogs', 'debugMode', 'console', 'panelSelector'),
                "showPanelLabels" => 1,
                "processwireInfoPanelSections" => array('summary', 'templateInfo', 'fieldsListValues', 'adminLinks', 'documentationLinks', 'editLinks'),
                "diagnosticsPanelSections" => array('filesystemFolders'),
                "todoIgnoreDirs" => 'git, svn, images, img, errors',
                "todoScanModules" => null,
                "todoAllowedExtensions" => 'php, module, inc, txt, latte, html, htm, md, css, scss, less, js',
                "variablesShowPwObjects" => null,
                "respectConfigDebugTools" => 1,
                "userDevTemplate" => null,
                "userDevTemplateSuffix" => 'dev',
                "customPhpCode" => '',
                "email" => '',
                "clearEmailSent" => null,
                "editor" => 'subl://open/?url=file://%file&line=%line',
                "localRootPath" => '',
                "htaccessUsername" => '',
                "htaccessPassword" => '',
                "enableShortcutMethods" => 1,
                "enabledShortcutMethods" => array('debugAll', 'da', 'dump', 'd', 'barDump', 'bd', 'l', 'timer', 't', 'fireLog', 'fl', 'addBreakpoint', 'bp', 'templateVars', 'tv')
            );
    }


    /**
     * Populate the default config data
     *
     */
    public static $_data;

    public function __construct() {
        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
        //populate for later static access to data
        self::$_data = $this;

        //if not PW 3 or template compilation is disabled, then remove variables panel from available list
        if($this->config->version < 3 || ($this->config->version >= 3 && $this->config->templateCompile === false)) {
            unset(static::$allPanels['variables']);
        }
    }


    /**
     * Initialize the module and setup hooks
     */
    public function init() {}


    public function ready() {

        if($this->input->get->modal) return;

        // if PW version changed, reload to initialize new version
        if($this->input->post->tracyPwVersion && $this->input->post->tracyPwVersion != $this->config->version) {
            $this->session->redirect('./');
        }

        // if mail panel items were cleared, clear them from the session variable and remove cookie
        if($this->input->cookie->tracyClearMailItems) {
            $this->session->tracyMailItems = null;
            unset($this->input->cookie->tracyClearMailItems);
            setcookie("tracyClearMailItems", "", time()-3600, "/");
        }

        // if event interceptor panel items were cleared, clear them from the session variable and remove cookie
        if($this->input->cookie->tracyClearEventItems) {
            $this->session->tracyEventItems = null;
            unset($this->input->cookie->tracyClearEventItems);
            setcookie("tracyClearEventItems", "", time()-3600, "/");
        }

        // if user dev template enabled and required permission exists in system,
        // check if current user has a matching permission for the current page's template
        if($this->user->isLoggedin() && $this->data['userDevTemplate'] && $this->permissions->get("template-".$this->data['userDevTemplateSuffix'])->id) {
            $devTemplateFilename = str_replace('.php', '-'.$this->data['userDevTemplateSuffix'].'.php', $this->page->template->filename);
            if(file_exists($devTemplateFilename) && $this->user->hasPermission("template-".$this->data['userDevTemplateSuffix'])) {
                $this->page->template->filename = static::$templatePath = static::$templatePathPermission = $devTemplateFilename;
            }
        }

        if($this->allowedTracyUsers()) {
            static::$tracyVersion = $this->data['coreBranch'];
            if(!file_exists(__DIR__ . '/tracy-'.static::$tracyVersion.'/src/tracy.php')) {
                static::$tracyVersion = version_compare(phpversion(), '5.4.4', '>=') ? 'master' : 'legacy';
            }
            require_once __DIR__ . '/tracy-'.static::$tracyVersion.'/src/tracy.php';
            // ensure Tracy is shutdown before PW
            if(static::$tracyVersion != 'legacy') $this->addHookBefore('ProcessWire::finished', $this, 'shutdownTracy');
        }
        else {
            // if user not allowed then load dummy class to prevent "class not found" errors when
            // calling \Tracy\Debugger::method() directly
            require_once __DIR__ . '/DummyTracyDebuggerClass.inc';
        }

        // always needs to be loaded to prevent function not defined errors when user not allowed to use Tracy
        require_once __DIR__ . '/TDClass.inc';

        // always needs to be loaded to prevent function not defined errors when user not allowed to use Tracy
        if($this->data['enableShortcutMethods']) {
            require_once __DIR__ . '/ShortcutMethods.inc';
        }

        // now that required classes above have been loaded if requested,
        // we can now exit if enabled unchecked, or user not allowed
        if(!$this->data['enabled'] || !$this->allowedTracyUsers()) return;

        if($this->data['outputMode'] == 'development' || ($this->user->isSuperuser() && $this->data['superuserForceDevelopment'])) {
            $outputMode = Debugger::DEVELOPMENT;
        }
        elseif($this->data['outputMode'] == 'production') {
            $outputMode = Debugger::PRODUCTION;
        }
        else {
            $outputMode = Debugger::DETECT;
        }

        Debugger::$editor = $this->data['editor'];

        // build up array of replacements to pass to Debugger::$editorMapping
        // they have to be completely separate replacements because Tracy uses strtr()
        // which won't replace the same substring more than once
        $mappingReplacements = array();
        if($this->data['localRootPath'] != '') {
            $mappingReplacements[$this->config->paths->cache . 'FileCompiler/'] = $this->data['localRootPath'];
            $mappingReplacements[$this->config->paths->root] = $this->data['localRootPath'];
        }
        else {
            $mappingReplacements[$this->config->paths->cache . 'FileCompiler/'] = $this->config->paths->root;
        }

        Debugger::$editorMapping = $mappingReplacements;

        $logFolder = $this->config->paths->logs.'tracy';

        // delete Tracy logs if requested
        if($this->input->post->deleteTracyLogs) {
            wireRmdir($logFolder, true);
        }

        // trash recorded pages if requested
        if($this->input->post->trashRecordedPages) {
            foreach($this->data['recordedPages'] as $pid) {
                $this->pages->trash($this->pages->get($pid));
            }
            unset($this->data['recordedPages']);
            $this->modules->saveModuleConfigData($this->modules->get("TracyDebugger"), $this->data);
        }

        if(!is_dir($logFolder)) wireMkdir($logFolder);

        Debugger::enable($outputMode, $logFolder, $this->data['email'] != '' ? $this->data['email'] : null);

        //convert checked location strings to constants and array_reduce to bitwise OR (|) line
        $locations = array_map('constant', $this->data['showLocation']);
        Debugger::$showLocation = array_reduce($locations, function($a, $b) { return $a | $b; }, 0);

        //convert checked log severity strings to constants and array_reduce to bitwise OR (|) line
        $severityOptions = array_map('constant', $this->data['logSeverity']);
        Debugger::$logSeverity = array_reduce($severityOptions, function($a, $b) { return $a | $b; }, 0);

        Debugger::$maxDepth = $this->data['maxDepth'];
        if(property_exists('Debugger', 'maxLength')) {
            Debugger::$maxLength = $this->data['maxLength'];
        }
        else {
            // backwards compatibility with older versions of Tracy core before
            // https://github.com/nette/tracy/commit/12d5cafa9264f2dfc3dfccb302a0eea404dcc24e
            Debugger::$maxLen = $this->data['maxLength'];
        }
        Debugger::getFireLogger()->maxDepth = $this->data['maxDepth'];
        Debugger::getFireLogger()->maxLength = $this->data['maxLength'];
        Debugger::getBlueScreen()->maxDepth = $this->data['maxDepth'];
        Debugger::getBlueScreen()->maxLength = $this->data['maxLength'];

        Debugger::$strictMode = $this->data['strictMode'] ? TRUE : FALSE;
        Debugger::$scream = $this->data['forceScream'] ? TRUE : FALSE;

        // if it's an ajax request from the Tracy Console panel, then process and return
        if($this->config->ajax && $this->input->post->tracyconsole == 1) {
            require_once($this->config->paths->siteModules.'TracyDebugger/ConsoleProcessor.inc');
            return;
        }

        if($this->page->template == "admin") {
            if(in_array('backend', $this->data['showDebugBar'])) {
                Debugger::$showBar = true;
            }
            else {
                Debugger::$showBar = false;
            }
        }

        //determine which panels to display
        $configEnabledPanels = $this->page->template == "admin" ? $this->data['backendPanels'] : $this->data['frontendPanels'];
        if($this->input->cookie->tracyPanelsOnce) {
            static::$oncePanels = array_filter(explode(',', $this->input->cookie->tracyPanelsOnce));
            static::$showPanels = static::$oncePanels;
            unset($this->input->cookie->tracyPanelsOnce);
            setcookie("tracyPanelsOnce", "", time()-3600, '/');
        }
        elseif($this->input->cookie->tracyPanelsSticky) {
            static::$stickyPanels = array_filter(explode(',', $this->input->cookie->tracyPanelsSticky));
            static::$showPanels = static::$stickyPanels;
        }
        else {
            static::$showPanels = $configEnabledPanels;
        }

        // sort panels based on order defined in config settings
        $showPanelsOrdered = array();
        $i=0;
        // add default panels in the defined order
        foreach($configEnabledPanels as $panelName) {
            if(in_array($panelName, static::$showPanels)) $showPanelsOrdered[$i] = $panelName;
            $i++;
        }
        // add once/sticky panels to the end because there is no specified order for these in config settings
        foreach(static::$allPanels as $panelName => $panelTitle) {
            if(in_array($panelName, static::$showPanels) && !in_array($panelName, $showPanelsOrdered)) $showPanelsOrdered[$i] = $panelName;
            $i++;
        }
        // move Panel Selector to the end so it has access to the generation time values for all other panels
        static::$showPanels = $showPanelsOrdered;
        if(($key = array_search('panelSelector', static::$showPanels)) !== false) {
            unset(static::$showPanels[$key]);
            static::$showPanels[] = 'panelSelector';
        }

        // mail panel intercept hook
        if(in_array('mail', static::$showPanels)) {
            $this->addHookBefore('WireMail::send', $this, 'interceptEmails');
        }

        // event interceptor hook
        if(in_array('eventInterceptor', static::$showPanels) && $this->input->cookie->eventInterceptorHook) {
            $this->addHookBefore($this->input->cookie->eventInterceptorHook, $this, 'interceptEvent');
        }

        // page recorder hook
        if(in_array('pageRecorder', static::$showPanels)) {
            $this->addHookAfter('Pages::added', $this, 'recordPage');
        }

        // user switcher panel logic
        if(in_array('userSwitcher', static::$showPanels) && $this->data['outputMode'] == 'development') {
            // if user is superuser and session length is set, save to config settings
            if($this->user->isSuperuser() && $this->input->post->userSwitchSessionLength && $this->session->CSRF->validate()) {
                // cleanup expired sessions
                if(isset($this->data['userSwitchSession'])) {
                    foreach($this->data['userSwitchSession'] as $id => $expireTime) {
                        if($expireTime < time()) unset($this->data['userSwitchSession'][$id]);
                    }
                }
                // if no existing session ID, start a new session
                if(!$this->session->tracyUserSwitcherId) {
                    $pass = new Password();
                    $challenge = $pass->randomBase64String(32);
                    $this->session->tracyUserSwitcherId = $challenge;
                }
                // save session ID and expiry time in module config settings
                $this->data['userSwitchSession'][$this->session->tracyUserSwitcherId] = time() + ($this->input->post->userSwitchSessionLength * 60);
                $this->modules->saveModuleConfigData($this->modules->get("TracyDebugger"), $this->data);
            }
            // if logout button clicked
            if($this->input->post->logoutUserSwitcher && $this->session->CSRF->validate()) {
                if($this->session->tracyUserSwitcherId) {
                    // if session variable exists, grab it and add to the new session after logging out
                    $tracyUserSwitcherId = $this->session->tracyUserSwitcherId;
                    $this->session->logout();
                    $this->session->tracyUserSwitcherId = $tracyUserSwitcherId;
                }
                else {
                    $this->session->logout();
                }
                $this->session->redirect('./');
            }
            elseif($this->input->post->endSessionUserSwitcher && $this->session->CSRF->validate()) {
                // if end session clicked, remove session variable and config settings entry
                $this->session->remove("tracyUserSwitcherId");
                unset($this->data['userSwitchSession'][$this->session->tracyUserSwitcherId]);
                $this->modules->saveModuleConfigData($this->modules->get("TracyDebugger"), $this->data);
                $this->session->redirect('./');
            }
            elseif($this->input->post->userSwitcher && $this->session->CSRF->validate()) {
                // if session not expired, switch to requested user
                if(isset($this->data['userSwitchSession'][$this->session->tracyUserSwitcherId]) && $this->data['userSwitchSession'][$this->session->tracyUserSwitcherId] > time() && $this->session->tracyUserSwitcherId) {
                    // if session variable exists, grab it and add to the new session after logging out
                    // and forceLogin the new switched user
                    $tracyUserSwitcherId = $this->session->tracyUserSwitcherId;
                    if($this->user->isLoggedin()) $this->session->logout();
                    $user = $this->session->forceLogin($this->input->post->userSwitcher);
                    $this->session->tracyUserSwitcherId = $tracyUserSwitcherId;
                }
                $this->session->redirect('./');
            }
        }

        // some front-end only rules
        if($this->page->template != "admin") {
            if(in_array('frontend', $this->data['showDebugBar'])) {

                Debugger::$showBar = true;

                // hook to add code to template file to grab template variables
                if($this->config->version >= 3 && $this->config->templateCompile !== false && in_array('variables', static::$showPanels)) {
                    $compiledFilePath = str_replace('/site/','/site/assets/cache/FileCompiler/site/', $this->page->template->filename);
                    if(file_exists($compiledFilePath)) unlink($compiledFilePath);
                    $this->addHookAfter('FileCompiler::compileData', $this, 'setTemplateVars');
                }

                if(in_array('validator', static::$showPanels)) {
                    $this->addHookAfter('Page::render', $this, 'getPageHtml');
                }

                // if template editor changes submitted
                if($this->input->post->tracyTemplateEditorRawCode && $this->user->isSuperuser()) {
                    $this->tempTemplateFilename = str_replace('.php', '-tracytemp.php', $this->page->template->filename);
                    if($this->input->post->testTemplateCode) {
                        if(!file_put_contents($this->tempTemplateFilename, $this->input->post->tracyTemplateEditorRawCode, LOCK_EX)) throw new WireException("Unable to write file: " . $this->tempTemplateFilename);
                        if($this->config->chmodFile) chmod($this->tempTemplateFilename, octdec($this->config->chmodFile));
                        $this->page->template->filename = $this->tempTemplateFilename;
                    }
                    if($this->input->post->changeTemplateCode) {
                        if(!file_put_contents($this->page->template->filename, $this->input->post->tracyTemplateEditorRawCode, LOCK_EX)) throw new WireException("Unable to write file: " . $this->tempTemplateFilename);
                        if($this->config->chmodFile) chmod($this->page->template->filename, octdec($this->config->chmodFile));
                    }
                }

            }
            else {
                Debugger::$showBar = false;
            }

        }

        if(Debugger::$showBar == false) return;

        require_once __DIR__ . '/CssPanel.inc';
        Debugger::getBar()->addPanel(new CssPanel);


        foreach(static::$showPanels as $panel) {
            if($this->page->template == 'admin' && in_array($panel, static::$hideInAdmin)) continue;
            if(($panel == 'console' || $panel == 'templateEditor') && !$this->user->isSuperuser()) continue;
            if($panel == 'userSwitcher') {
                if(isset($this->data['userSwitchSession'])) $userSwitchSession = $this->data['userSwitchSession'];
                if($this->data['outputMode'] != 'development' || (!$this->user->isSuperuser() && (!$this->session->tracyUserSwitcherId || (isset($userSwitchSession[$this->session->tracyUserSwitcherId]) && $userSwitchSession[$this->session->tracyUserSwitcherId] <= time())))) continue;
            }

            $panelName = ucfirst($panel).'Panel';

            switch($panel) {
                case 'performance':
                    require_once __DIR__ . '/'.$panelName.'.inc';
                    break;
                case 'processwireInfo':
                case 'processwireLogs':
                case 'tracyLogs':
                case 'methodsInfo':
                case 'diagnostics':
                case 'debugMode':
                case 'users':
                case 'userSwitcher':
                case 'phpInfo':
                case 'outputMode':
                case 'panelSelector':
                case 'validator':
                case 'console':
                case 'todo':
                case 'mail':
                case 'eventInterceptor':
                case 'processwireVersion':
                case 'templateEditor':
                case 'customPhp':
                case 'pageRecorder':
                    require_once __DIR__ . '/'.$panelName.'.inc';
                    Debugger::getBar()->addPanel(new $panelName);
                    break;
                case 'templatePath':
                    require_once __DIR__ . '/'.$panelName.'.inc';
                    static::$templatePathOnce = $this->findInCookie($this->input->cookie->tracyTemplatePathOnce);
                    static::$templatePathSticky = $this->findInCookie($this->input->cookie->tracyTemplatePathSticky);
                    if(static::$templatePathOnce) {
                        static::$templatePath = static::$templatePathOnce;
                        unset($this->input->cookie->tracyTemplatePathOnce);
                        setcookie("tracyTemplatePathOnce", "", time()-3600, "/");
                    }
                    elseif(static::$templatePathSticky) {
                        static::$templatePath = static::$templatePathSticky;
                    }
                    elseif(static::$templatePath != '') {
                        // don't change as already set by dev template permission functionality
                    }
                    else {
                        static::$templatePath = '';
                    }

                    if(static::$templatePath != '') {
                        $this->page->template->filename = static::$templatePath;
                    }
                    Debugger::getBar()->addPanel(new $panelName);
                    break;
                case 'variables':
                    if($this->config->version >= 3 && $this->config->templateCompile !== false) {
                            require_once __DIR__ . '/'.$panelName.'.inc';
                            Debugger::getBar()->addPanel(new $panelName);
                    }
                    break;
            }
        }
    }


    // for the validator panel
    public function getPageHtml($event) {
        static::$pageHtml = $event->return;
    }


    // for the mail panel
    public function interceptEmails($event) {
        $mailItem = array();
        $mailItems = wire('session')->tracyMailItems ? wire('session')->tracyMailItems : array();
        foreach(array('subject', 'from', 'fromName', 'to', 'toName', 'cc', 'ccName', 'bcc', 'body', 'bodyHTML', 'attachments') as $param) {
            $mailItem[$param] = $event->object->$param;
        }
        $mailItem['timestamp'] = time();
        array_unshift($mailItems, $mailItem);
        wire('session')->tracyMailItems = $mailItems;
        $event->replace = true;
        $event->return = false;
    }

    // for the event interceptor panel
    public function interceptEvent($event) {
        $eventItem = array();
        $eventItems = wire('session')->tracyEventItems ? wire('session')->tracyEventItems : array();
        $eventItem['timestamp'] = time();
        $eventItem['object'] = Dumper::toHtml($event->object, array(Dumper::COLLAPSE => true));
        $eventItem['arguments'] = Dumper::toHtml($event->arguments, array(Dumper::COLLAPSE => true));
        array_unshift($eventItems, $eventItem);
        wire('session')->tracyEventItems = $eventItems;
        $event->replace = true;
        $event->return = false;
    }

    // for the page recorder panel
    public function recordPage($event) {
        $this->data['recordedPages'][] = $event->arguments(0)->id;
        $this->modules->saveModuleConfigData($this->modules->get("TracyDebugger"), $this->data);
    }


    // ensure Tracy is shutdown before PW
    // this ensures Tracy will be able to detect AJAX requests when SessionHandlerDB module is installed
    public function shutdownTracy($event) {
        Debugger::shutdownHandler();
    }


    public function findInCookie($cookie) {
        $templateEntries = explode(',', $cookie);
        foreach($templateEntries as $templateEntry) {
            $arr = explode("|", $templateEntry, 2);
            if($arr[0] == wire('page')->template->name) {
                return $arr[1];
                break;
            }
        }
        return false;
    }


    public function setTemplateVars($event) {

        if(wire('config')->version < 3) return false;

        //remove trailing whitespace and any existing closing php tag
        //add call to populate wire("templateVars")
        //only for filename which matches the name of the template for this page
        if ($event['arguments'][1] == wire('page')->template->filename) {
            $out = rtrim($event->return);
            $pos = strrpos($out, '<?');
            $lastPhpTag = $pos === false ? $out : substr($out, $pos + 1);

            if (strpos($lastPhpTag, '?>') !== false) {
                $closeTag = '';
            }
            else {
                $closeTag = '?>';
            }

            $event->return = $out . $closeTag . "\n<?php\nif(class_exists('\TracyDebugger')) {\n\t\TracyDebugger::".'$templateVars'." = \TracyDebugger::templateVars(get_defined_vars());\n}";
        }
    }


    /**
     * Helper function to remove PW variables from get_defined_vars() call
     */
    public static function templateVars($vars) {

        if(wire('config')->version < 3) return false;

        $pwVars = array('fuel','options');
        foreach(wire('fuel') as $key => $value) {
            if(!is_object($value)) continue;
            $pwVars[] = $key;
        }

        $nonPwVars = $vars;
        foreach($vars as $key => $var) {
            if(is_object($var) || is_array($var)) {
                if(in_array($key, $pwVars)) unset($nonPwVars[$key]);
            }
        }

        unset($nonPwVars['templateVars']);
        unset($nonPwVars['pwVars']);
        unset($nonPwVars['key']);
        unset($nonPwVars['value']);
        unset($nonPwVars['p']);
        unset($nonPwVars['ps']);

        return $nonPwVars;

    }


    /**
     * Helper function to format human friendly file size
     */
    public static function human_filesize($size) {
        if($size == 0) return("0 Bytes");
        $filesizename = array("&nbsp;Bytes", "&nbsp;KB", "&nbsp;MB", "&nbsp;GB", "&nbsp;TB", "&nbsp;PB", "&nbsp;EB", "&nbsp;ZB", "&nbsp;YB");
        return round($size/pow(1024, ($i = floor(log($size, 1024)))), 1) . $filesizename[$i];
    }


    /**
     * Helper function to insert generated time and size for a panel
     */
    public static function generatedTimeSize($seconds, $kilobytes) {
        return '<p style="font-size:9px !important; text-align:left !important"><br />Panel generated in '.round($seconds, 4).' seconds<br />Panel content size: '.static::human_filesize($kilobytes).'</p>';
    }


    /**
     * Helper function to convert remote path to local path
     */
    public static function makePathLocal($path) {
        if(self::getDataValue('localRootPath') != '') $path = str_replace(wire('config')->paths->root, self::getDataValue('localRootPath'), $path);
        return $path;
    }


    /**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        if(wire('input')->post->submit_save_module) {
            unset(wire('input')->cookie->tracyPanelsSticky);
            setcookie("tracyPanelsSticky", "", time()-3600, '/');
        }

        if(wire('input')->post->clearEmailSent) {
            $emailSentPath = wire('config')->paths->logs.'tracy/email-sent';
            if(file_exists($emailSentPath)) {
                $removed = unlink($emailSentPath);
            }
            if (!isset($removed) || !$removed) wire()->error( __('No file to remove'));
            else wire()->message(__("email-sent file deleted successfully"));
        }

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Main Setup");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'enabled');
        $f->label = __('Enable Tracy Debugger', __FILE__);
        $f->description = __('Uncheck to disable the Tracy Debugger.'."\n".'For more details on the settings below:'."\n".'[TracyDebugger Blog: Docs and Tutorial](https://processwire.com/blog/posts/introducing-tracy-debugger/)'."\n".'[Tracy Docs](https://tracy.nette.org/)', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['enabled'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldSelect");
        $f->attr('name', 'coreBranch');
        $f->label = 'Core Tracy Branch';
        $f->description = __('Which version of the Tracy core to use. Master (dev) requires PHP 5.4.4+ and will be automatically selected if your PHP version is sufficient.', __FILE__);
        $f->columnWidth = 50;
        $f->required = true;
        $f->addOption('master', 'Master');
        $f->addOption('legacy', 'Legacy (for PHP < 5.4.4)');
        if($data['coreBranch']) $f->attr('value', $data['coreBranch']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldSelect");
        $f->attr('name', 'outputMode');
        $f->label = 'Output Mode';
        $f->description = __('The DETECT option automatically switches from DEVELOPMENT to PRODUCTION mode based on whether the IP of the site is publicly accessible or not.', __FILE__);
        $f->notes = __('In PRODUCTION mode, all errors and dumps etc are logged to file. Nothing is displayed in the browser.', __FILE__);
        $f->columnWidth = 50;
        $f->required = true;
        $f->addOption('detect', 'DETECT');
        $f->addOption('development', 'DEVELOPMENT');
        $f->addOption('production', 'PRODUCTION');
        if($data['outputMode']) $f->attr('value', $data['outputMode']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'allowLogProduction');
        $f->label = __('Allow Logging in Production Mode', __FILE__);
        $f->description = __('Allows logging for all users in PRODUCTION mode, regardless of any other settings (ie "tracy-debugger" permission and IP Address restriction).', __FILE__);
        $f->notes = __('The DebugBar will be hidden, and all errors/warnings, and dumps etc will be sent to log files. The is safe for production and is the best option if you want Tracy to handle capturing and logging everything. RECOMMENDED!', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['allowLogProduction'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Access Permission");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'superuserForceDevelopment');
        $f->label = __('Superuser Force Development Mode', __FILE__);
        $f->description = __('Check to force DEVELOPMENT mode for superusers even on live sites.', __FILE__);
        $f->notes = __('By default, the Output Mode setting\'s DETECT option will force a site into PRODUCTION mode when it is live, which hides the DebugBar and sends errors and dumps to log files. However, with this checked, Superusers will always be in DEVELOPMENT mode.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['superuserForceDevelopment'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'ipAddress');
        $f->label = __('Restrict Non-superusers', __FILE__);
        $f->description = __('IP Address that non-superusers need to use TracyDebugger. Enter IP address or a PCRE regular expression to match IP address of user, eg. /^123\.456\.789\./ would match all IP addresses that started with 123.456.789.', __FILE__);
        $f->columnWidth = 50;
        $f->notes = __('Non-superusers are already blocked unless they have the "tracy-debugger" permission. But once a user has been given the permission, this option restricts access to the listed IP address. Highly recommended for debugging live sites that you have manually set into DEVELOPMENT mode.', __FILE__);
        if($data['ipAddress']) $f->attr('value', $data['ipAddress']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Miscellaneous");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'strictMode');
        $f->label = __('Strict Mode', __FILE__);
        $f->description = __('Check to enable strict mode which displays notices and warnings like errors.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['strictMode'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'forceScream');
        $f->label = __('Force Scream', __FILE__);
        $f->description = __('Check to force "scream" of mode which disables the @ (silence/shut-up) operator so that notices and warnings are no longer hidden.', __FILE__);
        $f->notes = __('This is disabled when Strict Mode is enabled because of a bug? [https://forum.nette.org/en/25569-strict-and-scream-modes-together](https://forum.nette.org/en/25569-strict-and-scream-modes-together) in the core Tracy package.', __FILE__);
        $f->showIf="strictMode!='1'";
        $f->columnWidth = 50;
        $f->attr('checked', $data['forceScream'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'showLocation');
        $f->label = 'Show Location';
        $f->description = __('Shows the location of dump() and barDump() calls.', __FILE__);
        $f->notes = __('LOCATION_SOURCE adds tooltip with path to the file, where the function was called.'."\n".'LOCATION_LINK adds a link to the file.'."\n".'LOCATION_CLASS adds a tooltip to every dumped object containing path to the file, in which the object\'s class is defined.');
        $f->columnWidth = 50;
        $f->addOption('Tracy\Dumper::LOCATION_SOURCE', 'LOCATION_SOURCE');
        $f->addOption('Tracy\Dumper::LOCATION_LINK', 'LOCATION_LINK');
        $f->addOption('Tracy\Dumper::LOCATION_CLASS', 'LOCATION_CLASS');
        if($data['showLocation']) $f->attr('value', $data['showLocation']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'logSeverity');
        $f->label = 'Log Severity';
        $f->description = __('If you want Tracy to log PHP errors like E_NOTICE or E_WARNING with detailed information (HTML report), set them here.', __FILE__);
        $f->notes = __('These only affect log file content, not onscreen debug info.');
        $f->columnWidth = 50;
        $f->addOption('E_ERROR', 'E_ERROR');
        $f->addOption('E_WARNING', 'E_WARNING');
        $f->addOption('E_PARSE', 'E_PARSE');
        $f->addOption('E_NOTICE', 'E_NOTICE');
        $f->addOption('E_CORE_ERROR', 'E_CORE_ERROR');
        $f->addOption('E_CORE_WARNING', 'E_CORE_WARNING');
        $f->addOption('E_COMPILE_ERROR', 'E_COMPILE_ERROR');
        $f->addOption('E_COMPILE_WARNING', 'E_COMPILE_WARNING');
        $f->addOption('E_USER_ERROR', 'E_USER_ERROR');
        $f->addOption('E_USER_WARNING', 'E_USER_WARNING');
        $f->addOption('E_USER_NOTICE', 'E_USER_NOTICE');
        $f->addOption('E_STRICT', 'E_STRICT');
        $f->addOption('E_RECOVERABLE_ERROR', 'E_RECOVERABLE_ERROR');
        $f->addOption('E_DEPRECATED', 'E_DEPRECATED');
        $f->addOption('E_USER_DEPRECATED', 'E_USER_DEPRECATED');
        $f->addOption('E_ALL', 'E_ALL');
        if($data['logSeverity']) $f->attr('value', $data['logSeverity']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'maxDepth');
        $f->label = __('Maximum Nesting Depth', __FILE__);
        $f->description = __('Set the maximum nesting depth of dumped arrays and objects.', __FILE__);
        $f->notes = __('Default: 3. Warning: making this too large can slow your page load down or even crash your browser.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('value', $data['maxDepth']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'maxLength');
        $f->label = __('Maximum String Length', __FILE__);
        $f->description = __('Set the maximum displayed strings length.', __FILE__);
        $f->notes = __('Default: 150.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('value', $data['maxLength']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldEmail");
        $f->attr('name', 'email');
        $f->label = __('Email for production errors', __FILE__);
        $f->description = __('Receive emails at this address when an error occurs in production mode.', __FILE__);
        $f->columnWidth = 66;
        if($data['email']) $f->attr('value', $data['email']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'clearEmailSent');
        $f->label = __('Clear Email Sent Flag', __FILE__);
        $f->description = __('Check and save settings to remove the "email-sent" file so that you will start receiving new error emails.', __FILE__);
        $f->columnWidth = 34;
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Debug Bar and Panels");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'showDebugBar');
        $f->label = __('Show Debug Bar', __FILE__);
        $f->description = __('Show the debug bar.', __FILE__);
        $f->columnWidth = 50;
        $f->addOption('frontend', 'Frontend');
        $f->addOption('backend', 'Backend');
        if($data['showDebugBar']) $f->attr('value', $data['showDebugBar']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showPanelLabels');
        $f->label = __('Show Panel Labels', __FILE__);
        $f->description = __('Show the labels next to each panel.', __FILE__);
        $f->notes = __('Unchecking this will make the debugger bar much more compact.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['showPanelLabels'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldAsmSelect");
        $f->attr('name', 'frontendPanels');
        $f->label = __('Frontend Panels', __FILE__);
        $f->description = __('Determines which panels are shown in the Debug Bar on the frontend. Sort to match order of panels in Debugger Bar.', __FILE__);
        $f->columnWidth = 50;
        foreach(static::$allPanels as $name => $label) {
            $f->addOption($name, $label);
        }
        if($data['frontendPanels']) $f->attr('value', $data['frontendPanels']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldAsmSelect");
        $f->attr('name', 'backendPanels');
        $f->label = __('Backend Panels', __FILE__);
        $f->description = __('Determines which panels are shown in the Debug Bar on the backend. Sort to match order of panels in Debugger Bar. Obviously only relevant if "Backend" is checked in the Show Debug Bar setting above.', __FILE__);
        $f->notes = __('Note that '.implode(', ', static::$hideInAdmin).' are intentionally missing from this list because they have no use in the backend.', __FILE__);
        $f->columnWidth = 50;
        foreach(static::$allPanels as $name => $label) {
            if(!in_array($name, static::$hideInAdmin)) {
                $f->addOption($name, $label);
            }
        }
        if($data['backendPanels']) $f->attr('value', $data['backendPanels']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("ProcessWire Info Panel Options");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'processwireInfoPanelSections');
        $f->label = __('Panel Sections', __FILE__);
        $f->description = __('Which sections to include in the ProcessWire Info panel.', __FILE__);
        $f->notes = __('The three "Object" options will significantly increase the size of this panel.', __FILE__);
        foreach(static::$processWireInfoSections as $name => $label) {
            $f->addOption($name, $label);
        }
        if($data['processwireInfoPanelSections']) $f->attr('value', $data['processwireInfoPanelSections']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Diagnostics Panel Options");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'diagnosticsPanelSections');
        $f->label = __('Panel Sections', __FILE__);
        $f->description = __('Which sections to include in the Diagnostics panel.', __FILE__);
        $f->notes = __('The "Filesystem Files" option may significantly increase the generation time for this panel.', __FILE__);
        foreach(static::$diagnosticsSections as $name => $label) {
            $f->addOption($name, $label);
        }
        if($data['diagnosticsPanelSections']) $f->attr('value', $data['diagnosticsPanelSections']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("ToDo Panel Options");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'todoIgnoreDirs');
        $f->label = __('Ignore Directories', __FILE__);
        $f->description = __('Comma separated list of terms used to match folders to be ignored when scanning for ToDo items.', __FILE__);
        $f->notes = __('Default: git, svn, images, img, errors', __FILE__);
        $f->columnWidth = 40;
        if($data['todoIgnoreDirs']) $f->attr('value', $data['todoIgnoreDirs']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'todoAllowedExtensions');
        $f->label = __('Allowed Extensions', __FILE__);
        $f->description = __('Comma separated list file extensions to be scanned for ToDo items.', __FILE__);
        $f->notes = __('Default: php, module, inc, txt, latte, html, htm, md, css, scss, less, js', __FILE__);
        $f->columnWidth = 40;
        if($data['todoAllowedExtensions']) $f->attr('value', $data['todoAllowedExtensions']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'todoScanModules');
        $f->label = __('Scan Site Modules', __FILE__);
        $f->description = __('Check to allow the ToDo to scan the /site/modules directory. Otherwise it will only scan /site/templates.', __FILE__);
        $f->notes = __('Not recommended unless you are a regular module developer.', __FILE__);
        $f->columnWidth = 20;
        $f->attr('checked', $data['todoScanModules'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("ProcessWire and Tracy Log Panel Options");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'numLogEntries');
        $f->label = __('Number of Log Entries', __FILE__);
        $f->description = __('Set the number of log entries to be displayed for the Tracy and ProcessWire log viewer panels.', __FILE__);
        $f->notes = __('Default: 10', __FILE__);
        $f->attr('value', $data['numLogEntries']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Variables Panel Options");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'variablesShowPwObjects');
        $f->label = __('Show content of ProcessWire Objects', __FILE__);
        $f->description = __('Shows the full ProcessWire object contents, rather than arrays of values. Only recommended for specific debugging purposes.', __FILE__);
        $f->notes = __('Checking this will significantly increase the size of this panel if you have any variables set to ProcessWire objects.', __FILE__);
        $f->attr('checked', $data['variablesShowPwObjects'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Debug Panel Options");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'respectConfigDebugTools');
        $f->label = __('Respect the PW $config->debugTools config option.', __FILE__);
        $f->description = __('If unchecked, all debug tools will be displayed regardless of your config setting.', __FILE__);
        $f->attr('checked', $data['respectConfigDebugTools'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("User Dev Template Options");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'userDevTemplate');
        $f->label = __('Enable User Dev Template', __FILE__);
        $f->description = __('If user has a role or permission named to match the page template with the set extension the page will be rendered with that template file rather than the default.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['userDevTemplate'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'userDevTemplateSuffix');
        $f->label = __('User Dev Template Suffix', __FILE__);
        $f->description = __('Template file suffix. eg "dev" will render the homepage with the "home-dev.php" template file if the user has a matching role or permission, eg. "template-dev".', __FILE__);
        $f->columnWidth = 50;
        if($data['userDevTemplateSuffix']) $f->attr('value', $data['userDevTemplateSuffix']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Custom PHP");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldTextarea");
        $f->attr('name', 'customPhpCode');
        $f->label = __('Custom PHP Code', __FILE__);
        $f->description = __('Use this PHP code block to return any output you want.', __FILE__);
        $f->notes = __('eg. return \'<a href="https://developers.google.com/speed/pagespeed/insights/?url=\'.$page->httpUrl.\'">Google Speedtest</a>\';', __FILE__);
        if($data['customPhpCode']) $f->attr('value', $data['customPhpCode']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Editor Protocol Handler");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'editor');
        $f->label = __('Editor Protocol Handler', __FILE__);
        $f->description = __('Sets the Tracy `Debugger::$editor` variable. Enter the appropriate address to open your code editor of choice.'."\n".'This approach only works for OSX. For more instructions on Windows and Linux alternatives, [read here](https://pla.nette.org/en/how-open-files-in-ide-from-debugger).'."\n".'For easily adding the SublimeText "subl://" protocol handler to your Mac, use this free [tool](https://github.com/saetia/sublime-url-protocol-mac).', __FILE__);
        $f->notes = __('Initially configured for SublimeText (`subl://open/?url=file://%file&line=%line`). Change to work with your favorite editor.', __FILE__);
        $f->columnWidth = 50;
        if($data['editor']) $f->attr('value', $data['editor']);
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'localRootPath');
        $f->label = __('Local Root Path', __FILE__);
        $f->description = __('This will map editor links from a production site to your local dev files.', __FILE__);
        $f->notes = __('An example path might be: /Users/myname/Sites/sitefolder/', __FILE__);
        $f->columnWidth = 50;
        if($data['localRootPath']) $f->attr('value', $data['localRootPath']);
        $fieldset->add($f);

        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->label = __("Method Shortcuts");
        $wrapper->add($fieldset);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'enableShortcutMethods');
        $f->label = __('Enable Shortcut Methods', __FILE__);
        $f->description = __('Uncheck to not define any of the shortcut methods. If you are not going to use these in your templates, unchecking means that they will not be defined which may reduce possible future name clashes. If in doubt, uncheck and use the full methods:'."\n".'TD::debugAll()'."\n".'TD::dump()'."\n".'TD::barDump()'."\n".'TD::log()'."\n".'TD::timer()'."\n".'TD::fireLog()'."\n".'TD::addBreakpoint()'."\n".'TD::templateVars()', __FILE__);
        $f->notes = __('If this, or one of the shortcut methods is not enabled, but is called in your templates, all users will get a "call to undefined function" fatal error, so please be aware when using the shortcut methods in your templates if they are not enabled here.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['enableShortcutMethods'] == '1' ? 'checked' : '' );
        $fieldset->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'enabledShortcutMethods');
        $f->label = __('Enabled Shortcut Methods', __FILE__);
        $f->description = __('Uncheck any shortcuts/aliases to methods that you do not want available.', __FILE__);
        $f->notes = __('Useful if any of these functions/methods are defined elswhere in your site and you are getting a "previously declared" fatal error.', __FILE__);
        $f->showIf = "enableShortcutMethods=1";
        $f->columnWidth = 50;
        $f->addOption('debugAll', 'debugAll() for TD::debugAll()');
        $f->addOption('da', 'da() for TD::debugAll()');
        $f->addOption('dump', 'dump() for TD::dump()');
        $f->addOption('d', 'd() for TD::dump()');
        $f->addOption('barDump', 'barDump() for TD::barDump()');
        $f->addOption('bd', 'bd() for TD::barDump()');
        $f->addOption('l', 'l() for TD::log()');
        $f->addOption('timer', 'timer() for TD::timer()');
        $f->addOption('t', 't() for TD::timer()');
        $f->addOption('fireLog', 'fireLog() for TD::fireLog()');
        $f->addOption('fl', 'fl() for TD::fireLog()');
        $f->addOption('addBreakpoint', 'addBreakpoint() for TD::addBreakpoint()');
        $f->addOption('bp', 'bp() for TD::addBreakpoint()');
        $f->addOption('templateVars', 'templateVars() for TD::templateVars()');
        $f->addOption('tv', 'tv() for TD::templateVars()');
        if($data['enabledShortcutMethods']) $f->attr('value', $data['enabledShortcutMethods']);
        $fieldset->add($f);

        return $wrapper;
    }

    /**
     * Getter function to get a $data index value
     */
    public static function getDataValue($property) {
        if(is_array(self::$_data->$property)) {
            return self::$_data->$property;
        }
        else {
            return trim(self::$_data->$property);
        }
    }

    /**
    * Determine if Tracy is loading an additional panel - via AJAX, or a redirect panel
    * In this case we don't want to add most of our custom panels to the new bar because they don't change
    */
    public static function additionalBar() {
        $isRedirect = preg_match('#^Location:#im', implode("\n", headers_list()));
        if((static::$tracyVersion != 'legacy' && Helpers::isAjax()) || $isRedirect) {
            return true;
        }
        else {
            return false;
        }
    }

    public static function checkIpAddress() {

        $ipAddress = static::getDataValue('ipAddress');
        $ipAddressAllowed = null;

        if($ipAddress != '') {
            if(strpos($ipAddress, '/') === 0) $ipAddressAllowed = (bool) @preg_match($ipAddress, $_SERVER['REMOTE_ADDR']); // regex IPs
                else $ipAddressAllowed = $ipAddress === $_SERVER['REMOTE_ADDR']; // exact IP match
        }
        return array('ipAddress' => $ipAddress, 'ipAddressAllowed' => $ipAddressAllowed);
    }


    public static function allowedTracyUsers($u = null) {

        if(static::getDataValue('userSwitchSession') !== null) $userSwitchSession = static::getDataValue('userSwitchSession');

        $u = $u ? $u : wire('user');

        //allow Tracy to log to file for guest users when in production mode (not in development mode)
        if(static::getDataValue('allowLogProduction') == 1 && static::getDataValue('outputMode') != 'development') {
            return true;
        }
        elseif($u->isSuperuser()) {
            return true;
        }
        elseif(static::getDataValue('outputMode') == 'development' && wire('session')->tracyUserSwitcherId && (isset($userSwitchSession[wire('session')->tracyUserSwitcherId]) && $userSwitchSession[wire('session')->tracyUserSwitcherId] > time())) {
            return true;
        }
        else {
            $checkIpAddress = static::checkIpAddress();
            if($checkIpAddress['ipAddress'] != '' && $u->hasPermission('tracy-debugger')) {
                return $checkIpAddress['ipAddressAllowed'];
            }
            elseif($u->hasPermission('tracy-debugger')) {
                return true;
            }
            else {
                return false;
            }
        }
    }


    public function __destruct() {
        if($this->input->post->tracyPwVersion && $this->input->post->tracyPwVersion != $this->config->version) {
            $rootPath = $this->config->paths->root;
            // rename wire
            rename($rootPath.'wire', $rootPath.'.wire-'.$this->config->version);
            rename($rootPath.'.wire-'.$this->input->post->tracyPwVersion, $rootPath.'wire');
            // rename .htaccess if previously replaced
            if(file_exists($rootPath.'.htaccess-'.$this->input->post->tracyPwVersion)) {
                rename($rootPath.'.htaccess', $rootPath.'.htaccess-'.$this->config->version);
                rename($rootPath.'.htaccess-'.$this->input->post->tracyPwVersion, $rootPath.'.htaccess');
            }
            // rename index.php if previously replaced
            if(file_exists($rootPath.'.index-'.$this->input->post->tracyPwVersion.'.php')) {
                rename($rootPath.'index.php', $rootPath.'.index-'.$this->config->version.'.php');
                rename($rootPath.'.index-'.$this->input->post->tracyPwVersion.'.php', $rootPath.'index.php');
            }
        }

        // delete temporary template file after it's been rendered
        // this is from the Template Editor panel
        if(isset($this->tempTemplateFilename) && file_exists($this->tempTemplateFilename)) unlink($this->tempTemplateFilename);
    }


    public function ___upgrade() {
        // old helper Processs module no longer needed
        if(wire('modules')->isInstalled('ProcessTracyConsole')) wire('modules')->uninstall('ProcessTracyConsole');
    }

}

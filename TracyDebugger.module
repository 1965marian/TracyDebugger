<?php

/**
 * Processwire module for running the Tracy debugger from Nette.
 * by Adrian Jones
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * A big thanks to Roland Toth (https://github.com/rolandtoth/) for the idea for this module
 * and for significant feedback, testing, and feature suggestions.
 *
 */

use Tracy\Debugger;

class TracyDebugger extends WireData implements Module, ConfigurableModule {

    /**
     * Basic information about module
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Tracy Debugger',
            'summary' => 'Tracy debugger from Nette.',
            'href' => 'https://processwire.com/talk/topic/12208-tracy-debugger/',
            'version' => 10,
            'autoload' => true,
            'singular' => true,
            'icon' => 'bug'
        );
    }


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "enabled" => 1,
                "strictMode" => null,
                "forceScream" => null,
                "outputMode" => 'detect',
                "showLocation" => array(),
                "showDebugBar" => 1,
                "showPWPanel" => 1,
                "email" => '',
                "clearEmailSent" => null
            );
    }


    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }

    /**
     * Initialize the module and setup hooks
     */
    public function init() {

        if(!wire('user')->isSuperuser() || !$this->data['enabled']) return;

        require_once __DIR__ . '/tracy/src/tracy.php';

        if($this->data['outputMode'] == 'production') {
            $outputMode = Debugger::PRODUCTION;
        }
        elseif($this->data['outputMode'] == 'development') {
            $outputMode = Debugger::DEVELOPMENT;
        }
        else {
            $outputMode = Debugger::DETECT;
        }

        $logFolder = $this->wire('config')->paths->logs.'tracy';
        if(!is_dir($logFolder)) wireMkdir($logFolder);

        Debugger::enable($outputMode, $logFolder, $this->data['email'] != '' ? $this->data['email'] : null);

        //convert checked location strings to constants and array_reduce to bitwise OR (|) line
        $locations = array_map('constant', $this->data['showLocation']);
        Debugger::$showLocation = array_reduce($locations, function($a, $b) { return $a | $b; }, 0);

        Debugger::$strictMode = $this->data['strictMode'] ? TRUE : FALSE;

        // TODO - waiting on feedback from here (https://forum.nette.org/en/25569-strict-and-scream-modes-together#p169933) before implementing
        //Debugger::$scream = $this->data['forceScream'] ? TRUE : FALSE;

        // TODO - doesn't seem to make a difference - need to investigate further
        //Debugger::$logSeverity = E_NOTICE | E_WARNING;

        Debugger::$showBar = $this->data['showDebugBar'] ? TRUE : FALSE;

        if($this->data['showPWPanel']) {
            require_once __DIR__ . '/ProcesswirePanel.inc';
            Debugger::getBar()->addPanel(new ProcessWirePanel);
        }

    }


    /**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        if(wire('input')->post->clearEmailSent) {
            $emailSentPath = wire('config')->paths->logs.'tracy/email-sent';
            if(file_exists($emailSentPath)) {
                $removed = unlink($emailSentPath);
            }
            if (!isset($removed) || !$removed) wire()->error( __('No file to remove'));
            else wire()->message(__("email-sent file deleted successfully"));
        }

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'enabled');
        $f->label = __('Enable Tracy Debugger', __FILE__);
        $f->description = __('Uncheck to disable the Tracy Debugger.', __FILE__);
        $f->attr('checked', $data['enabled'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'strictMode');
        $f->label = __('Strict Mode', __FILE__);
        $f->description = __('Check to enable strict mode which displays notices and warnings like errors.', __FILE__);
        $f->showIf = "enabled=1";
        $f->columnWidth = 33;
        $f->attr('checked', $data['strictMode'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

// TODO - waiting on feedback from here (https://forum.nette.org/en/25569-strict-and-scream-modes-together#p169933) before implementing
/*
        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'forceScream');
        $f->label = __('Force Scream', __FILE__);
        $f->description = __('Check to force "scream" of mode which disables the @ (shut-up) operator so that notices and warnings are no longer hidden.', __FILE__);
        $f->showIf = "enabled=1";
        $f->columnWidth = 33;
        $f->attr('checked', $data['forceScream'] == '1' ? 'checked' : '' );
        $wrapper->add($f);
*/

        $f = wire('modules')->get("InputfieldSelect");
        $f->attr('name', 'outputMode');
        $f->label = 'Output Mode';
        $f->description = __('The DETECT option automatically switches from DEVELOPMENT to PRODUCTION mode based on whether the IP of the site is publicly accessible or not.', __FILE__);
        $f->showIf = "enabled=1";
        $f->columnWidth = 34;
        $f->required = true;
        $f->addOption('detect', 'DETECT');
        $f->addOption('development', 'DEVELOPMENT');
        $f->addOption('production', 'PRODUCTION');
        if($data['outputMode']) $f->attr('value', $data['outputMode']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'showLocation');
        $f->label = 'Show Location';
        $f->description = __('Shows the location of a dump() call in various ways. For details, read the $showLocation section below here: https://doc.nette.org/en/2.3/debugging#toc-variables-dumping', __FILE__);
        $f->notes = __('The shown location information will only be accurate if you use "Tracy\Debugger::" rather than "TD::" calls. For pros and cons of each, please read the ReadMe for this module at: https://github.com/adrianbj/TracyDebugger');
        $f->showIf = "enabled=1";
        $f->columnWidth = 33;
        $f->addOption('Tracy\Dumper::LOCATION_SOURCE', 'LOCATION_SOURCE');
        $f->addOption('Tracy\Dumper::LOCATION_LINK', 'LOCATION_LINK');
        $f->addOption('Tracy\Dumper::LOCATION_CLASS', 'LOCATION_CLASS');
        if($data['showLocation']) $f->attr('value', $data['showLocation']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showDebugBar');
        $f->label = __('Show Debug Bar', __FILE__);
        $f->description = __('Uncheck to hide the debug bar.', __FILE__);
        $f->showIf = "enabled=1";
        $f->columnWidth = 50;
        $f->attr('checked', $data['showDebugBar'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showPWPanel');
        $f->label = __('Show ProcessWire Panel', __FILE__);
        $f->description = __('Uncheck to hide the ProcessWire panel from the debug bar.', __FILE__);
        $f->showIf = "enabled=1, showDebugBar=1";
        $f->columnWidth = 50;
        $f->attr('checked', $data['showPWPanel'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldEmail");
        $f->attr('name', 'email');
        $f->label = __('Email for error logs', __FILE__);
        $f->description = __('This email address will receive notification of errors.', __FILE__);
        $f->showIf = "enabled=1";
        $f->columnWidth = 66;
        if($data['email']) $f->attr('value', $data['email']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'clearEmailSent');
        $f->label = __('Clear Email Sent Flag', __FILE__);
        $f->description = __('Check and save settings to remove the "email-sent" file so that you will start receiving new error emails.', __FILE__);
        $f->showIf = "enabled=1, email!=''";
        $f->columnWidth = 34;
        $wrapper->add($f);

        return $wrapper;
    }

}


/**
 * Helper methods
 *
 * These are here so that they are available even when non-superuser or module not enabled so we
 * don't get a undefined function error when calling these from a template file.
 */

class TD {
    public static function barDump($var, $title = NULL, array $options = NULL) {
        if(class_exists('\Tracy\Debugger')) return Debugger::barDump($var, $title, $options);
    }

    public static function dump($var, array $options = NULL) {
        if(class_exists('\Tracy\Debugger')) return Debugger::dump($var, $options);
    }

    public static function log($message, $priority = Debugger::INFO) {
        if(class_exists('\Tracy\Debugger')) return Debugger::log($message, $priority);
    }
}

function bd() {
    return call_user_func_array('TD::barDump', func_get_args());
}

function d() {
    return call_user_func_array('TD::dump', func_get_args());
}

function l() {
    return call_user_func_array('TD::log', func_get_args());
}

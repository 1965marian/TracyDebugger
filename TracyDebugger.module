<?php

/**
 * Processwire module for running the Tracy debugger from Nette.
 * by Adrian Jones
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * A big thanks to Roland Toth (https://github.com/rolandtoth/) for the idea for this module
 * and for significant feedback, testing, and feature suggestions.
 *
 */

use Tracy\Debugger;
use Tracy\Helpers;

class TracyDebugger extends WireData implements Module, ConfigurableModule {

    /**
     * Basic information about module
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Tracy Debugger',
            'summary' => 'Tracy debugger from Nette with several PW specific custom tools.',
            'author' => 'Adrian Jones',
            'href' => 'https://processwire.com/talk/topic/12208-tracy-debugger/',
            'version' => 215,
            'autoload' => true,
            'singular' => true,
            'icon' => 'bug',
            'installs' => 'ProcessTracyConsole'
        );
    }


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();
    public static $templateVars = array();
    protected static $tracyVersion;
    public static $oncePanels;
    public static $stickyPanels;
    public static $showPanels;
    public static $templatePath;
    public static $templatePathOnce;
    public static $originalTemplatePath;
    public static $tempTemplateFilename;
    public static $panelGenerationTime = array();
    public static $hideInAdmin = array('validator', 'variables');
    public static $pageHtml;
    public static $allPanels = array(
        'performance' => 'Performance',
        'processwireInfo' => 'ProcessWire Info',
        'processwireLogs' => 'ProcessWire Logs',
        'tracyLogs' => 'Tracy Logs',
        'variables' => 'Variables',
        'methodsInfo' => 'Methods Info',
        'diagnostics' => 'Diagnostics',
        'debugMode' => 'Debug Mode',
        'validator' => 'Validator',
        'users' => 'Users',
        'outputMode' => 'Output Mode',
        'phpInfo' => 'PHP Info',
        'templatePath' => 'Template Path',
        'console' => 'Console',
        'templateEditor' => 'Template Editor',
        'todo' => 'ToDo',
        'processwireVersion' => 'ProcessWire Version',
        'panelSelector' => 'Panel Selector'
    );


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "enabled" => 1,
                "coreBranch" => version_compare(phpversion(), '5.4.4', '>=') ? 'master' : 'legacy',
                "allowLogProduction" => 1,
                "superuserForceDevelopment" => null,
                "ipAddress" => null,
                "strictMode" => null,
                "forceScream" => null,
                "outputMode" => 'detect',
                "showLocation" => array('Tracy\Dumper::LOCATION_SOURCE', 'Tracy\Dumper::LOCATION_LINK', 'Tracy\Dumper::LOCATION_CLASS'),
                "logSeverity" => array(),
                "numLogEntries" => 10,
                "maxDepth" => 3,
                "maxLength" => 150,
                "showDebugBar" => array('frontend'),
                "showPanels" => array('performance', 'processwireInfo', 'processwireLogs', 'tracyLogs', 'methodsInfo', 'debugMode', 'templatePath', 'console', 'templateEditor', 'panelSelector'),
                "showPanelLabels" => 1,
                "email" => '',
                "clearEmailSent" => null,
                "editor" => 'subl://open/?url=file://%file&line=%line',
                "localRootPath" => '',
                "htaccessUsername" => '',
                "htaccessPassword" => '',
                "debugStatements" => null,
                "enableShortcutMethods" => 1,
                "enabledShortcutMethods" => array('debugAll', 'da', 'dump', 'd', 'barDump', 'bd', 'l', 'timer', 't', 'fireLog', 'fl', 'addBreakpoint', 'bp', 'templateVars', 'tv')
            );
    }


    /**
     * Populate the default config data
     *
     */
    public static $_data;

    public function __construct() {
        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
        //populate for later static access to data
        self::$_data = $this;

        //if not PW 3 or template compilation is disabled, then remove variables panel from available list
        if(wire('config')->version < 3 || (wire('config')->version >= 3 && wire('config')->templateCompile === false)) {
            unset(static::$allPanels['variables']);
        }
    }


    /**
     * Initialize the module and setup hooks
     */
    public function init() {

        if(isset(wire('input')->get->modal) && wire('input')->get->modal == 1) return;

        // if PW version changed, reload to initialize new version
        if(isset($_POST['tracyPwVersion']) && $_POST['tracyPwVersion'] != $this->config->version) {
            wire('session')->redirect('./');
        }

        if($this->allowedTracyUsers()) {
            static::$tracyVersion = $this->data['coreBranch'];
            if(!file_exists(__DIR__ . '/tracy-'.static::$tracyVersion.'/src/tracy.php')) {
                static::$tracyVersion = version_compare(phpversion(), '5.4.4', '>=') ? 'master' : 'legacy';
            }
            require_once __DIR__ . '/tracy-'.static::$tracyVersion.'/src/tracy.php';
            // ensure Tracy is shutdown before PW
            $this->addHookBefore('ProcessWire::finished', $this, 'shutdownTracy');
        }

        // if user not allowed then load dummy class to prevent "class not found" errors when
        // calling \Tracy\Debugger::method() directly
        else {
            require_once __DIR__ . '/DummyTracyDebuggerClass.inc';
        }

        // always needs to be loaded to prevent function not defined errors when user not allowed to use Tracy
        require_once __DIR__ . '/TDClass.inc';

        // always needs to be loaded to prevent function not defined errors when user not allowed to use Tracy
        if($this->data['enableShortcutMethods']) {
            require_once __DIR__ . '/ShortcutMethods.inc';
        }

        // now that required classes above have been loaded if requested, we exit now
        // if enabled unchecked, or user not allowed
        if(!$this->data['enabled'] || !$this->allowedTracyUsers()) return;

        if($this->data['outputMode'] == 'development' || ($this->user->isSuperuser() && $this->data['superuserForceDevelopment'])) {
            $outputMode = Debugger::DEVELOPMENT;
        }
        elseif($this->data['outputMode'] == 'production') {
            $outputMode = Debugger::PRODUCTION;
        }
        else {
            $outputMode = Debugger::DETECT;
        }

        Debugger::$editor = $this->data['editor'];

        // build up array of replacements to pass to Debugger::$editorMapping
        // they have to be completely separate replacements because Tracy uses strtr()
        // which won't replace the same substring more than once
        $mappingReplacements = array();
        if($this->data['localRootPath'] != '') {
            $mappingReplacements[wire('config')->paths->cache . 'FileCompiler/'] = $this->data['localRootPath'];
            $mappingReplacements[wire('config')->paths->root] = $this->data['localRootPath'];
        }
        else {
            $mappingReplacements[wire('config')->paths->cache . 'FileCompiler/'] = wire('config')->paths->root;
        }

        Debugger::$editorMapping = $mappingReplacements;

        $logFolder = $this->wire('config')->paths->logs.'tracy';
        if(!is_dir($logFolder)) wireMkdir($logFolder);

        Debugger::enable($outputMode, $logFolder, $this->data['email'] != '' ? $this->data['email'] : null);

        //convert checked location strings to constants and array_reduce to bitwise OR (|) line
        $locations = array_map('constant', $this->data['showLocation']);
        Debugger::$showLocation = array_reduce($locations, function($a, $b) { return $a | $b; }, 0);

        //convert checked log severity strings to constants and array_reduce to bitwise OR (|) line
        $severityOptions = array_map('constant', $this->data['logSeverity']);
        Debugger::$logSeverity = array_reduce($severityOptions, function($a, $b) { return $a | $b; }, 0);

        Debugger::$maxDepth = $this->data['maxDepth'];
        if(property_exists('Debugger', 'maxLength')) {
            Debugger::$maxLength = $this->data['maxLength'];
        }
        else {
            // backwards compatibility with older versions of Tracy core before
            // https://github.com/nette/tracy/commit/12d5cafa9264f2dfc3dfccb302a0eea404dcc24e
            Debugger::$maxLen = $this->data['maxLength'];
        }
        Debugger::getFireLogger()->maxDepth = $this->data['maxDepth'];
        Debugger::getFireLogger()->maxLength = $this->data['maxLength'];
        Debugger::getBlueScreen()->maxDepth = $this->data['maxDepth'];
        Debugger::getBlueScreen()->maxLength = $this->data['maxLength'];

        Debugger::$strictMode = $this->data['strictMode'] ? TRUE : FALSE;
        Debugger::$scream = $this->data['forceScream'] ? TRUE : FALSE;

    }

    public function ready() {

        if(isset(wire('input')->get->modal) && wire('input')->get->modal == 1) return;

        // if enabled unchecked, or user not allowed
        if(!$this->data['enabled'] || !$this->allowedTracyUsers()) return;

        if(wire('page')->template == "admin") {
            if(in_array('backend', $this->data['showDebugBar'])) {
                Debugger::$showBar = true;
            }
            else {
                Debugger::$showBar = false;
            }
        }

        //determine which panels to display
        static::$oncePanels = array_filter(explode(',', $this->input->cookie->tracyPanelsOnce));
        static::$stickyPanels = array_filter(explode(',', $this->input->cookie->tracyPanelsSticky));
        if(isset($this->input->cookie->tracyPanelsOnce)) {
            static::$showPanels = static::$oncePanels;
            unset($this->input->cookie->tracyPanelsOnce);
            setcookie("tracyPanelsOnce", "", time()-3600, '/');
        }
        elseif(isset($this->input->cookie->tracyPanelsSticky)) {
            static::$showPanels = static::$stickyPanels;
        }
        else {
            static::$showPanels = $this->data['showPanels'];
        }

        if(wire('page')->template != "admin") {
            if(in_array('frontend', $this->data['showDebugBar'])) {

                Debugger::$showBar = true;

                // hook to add code to template file to grab template variables
                if(wire('config')->version >= 3 && wire('config')->templateCompile !== false && in_array('variables', static::$showPanels)) {
                    $compiledFilePath = str_replace('/site/','/site/assets/cache/FileCompiler/site/', wire('page')->template->filename);
                    if(file_exists($compiledFilePath)) unlink($compiledFilePath);
                    $this->addHookAfter('FileCompiler::compileData', $this, 'setTemplateVars');
                }

                if(in_array('validator', static::$showPanels)) {
                    $this->addHookAfter('Page::render', $this, 'getPageHtml');
                }

                // if template editor changes submitted
                if(isset($_POST['tracyTemplateEditorRawCode']) && wire('user')->isSuperuser()) {
                    $this->tempTemplateFilename = str_replace('.php', '-tracytemp.php', wire('page')->template->filename);
                    if(isset($_POST['testTemplateCode'])) {
                        if(!file_put_contents($this->tempTemplateFilename, $_POST['tracyTemplateEditorRawCode'], LOCK_EX)) throw new WireException("Unable to write file: " . $this->tempTemplateFilename);
                        if(wire('config')->chmodFile) chmod($this->tempTemplateFilename, octdec(wire('config')->chmodFile));
                        wire('page')->template->filename = $this->tempTemplateFilename;
                    }
                    if(isset($_POST['changeTemplateCode'])) {
                        if(!file_put_contents(wire('page')->template->filename, $_POST['tracyTemplateEditorRawCode'], LOCK_EX)) throw new WireException("Unable to write file: " . $this->tempTemplateFilename);
                        if(wire('config')->chmodFile) chmod(wire('page')->template->filename, octdec(wire('config')->chmodFile));
                    }
                }

            }
            else {
                Debugger::$showBar = false;
            }

            if(wire('config')->version >= 3 && wire('config')->templateCompile !== false && $this->data['debugStatements']) {
                $compiledFilePath = str_replace('/site/','/site/assets/cache/FileCompiler/site/', wire('page')->template->filename);
                if(file_exists($compiledFilePath)) unlink($compiledFilePath);
                $this->addHookAfter('FileCompiler::compileData', $this, 'insertDebugStatements');
            }
        }

        if(Debugger::$showBar == false) return;

        require_once __DIR__ . '/CssPanel.inc';
        Debugger::getBar()->addPanel(new CssPanel);

        foreach(static::$showPanels as $panel) {
            if(wire('page')->template == 'admin' && in_array($panel, static::$hideInAdmin)) continue;
            if(($panel == 'console' || $panel == 'templateEditor') && !wire('user')->isSuperuser()) continue;
            $panelName = ucfirst($panel).'Panel';
            switch($panel) {
                case 'performance':
                    require_once __DIR__ . '/'.$panelName.'.inc';
                    break;
                case 'processwireInfo':
                case 'processwireLogs':
                case 'tracyLogs':
                case 'methodsInfo':
                case 'diagnostics':
                case 'debugMode':
                case 'users':
                case 'phpInfo':
                case 'outputMode':
                case 'panelSelector':
                case 'validator':
                case 'console':
                case 'todo':
                case 'processwireVersion':
                case 'templateEditor':
                    require_once __DIR__ . '/'.$panelName.'.inc';
                    Debugger::getBar()->addPanel(new $panelName);
                    break;
                case 'templatePath':
                    require_once __DIR__ . '/'.$panelName.'.inc';
                    static::$templatePathOnce = $this->findInCookie($this->input->cookie->tracyTemplatePathOnce);
                    $templatePathSticky = $this->findInCookie($this->input->cookie->tracyTemplatePathSticky);
                    if(static::$templatePathOnce) {
                        static::$templatePath = static::$templatePathOnce;
                        unset($this->input->cookie->tracyTemplatePathOnce);
                        setcookie("tracyTemplatePathOnce", "", time()-3600, "/");
                    }
                    elseif($templatePathSticky) {
                        static::$templatePath = $templatePathSticky;
                    }
                    else {
                        static::$templatePath = '';
                    }
                    static::$originalTemplatePath = wire('page')->template->filename;
                    if(static::$templatePath != '') {
                        wire('page')->template->filename = static::$templatePath;
                    }
                    Debugger::getBar()->addPanel(new $panelName);
                    break;
                case 'variables':
                    if(wire('config')->version >= 3 && wire('config')->templateCompile !== false) {
                            require_once __DIR__ . '/'.$panelName.'.inc';
                            Debugger::getBar()->addPanel(new $panelName);
                    }
                    break;
            }
        }
    }


    // for the validator panel
    public function getPageHtml($event) {
        static::$pageHtml = $event->return;
    }


    // ensure Tracy is shutdown before PW
    // this ensures Tracy will be able to detect AJAX requests when SessionHandlerDB module is installed
    public function shutdownTracy($event) {
        Debugger::shutdownHandler();
    }


    public function findInCookie($cookie) {
        $templateEntries = explode(',', $cookie);
        foreach($templateEntries as $templateEntry) {
            $arr = explode("|", $templateEntry, 2);
            if($arr[0] == wire('page')->template->name) {
                return $arr[1];
                break;
            }
        }
        return false;
    }


    public function insertDebugStatements($event) {

        if(wire('config')->version < 3) return false;

        // only for filename which matches the name of the template for this page
        if ($event['arguments'][1] == wire('page')->template->filename) {
            if($this->data['debugStatements']) {
                $out = rtrim($event->return);
                $lines = explode("\n", $out);

                $i=-1;
                foreach(explode("\n", $this->data['debugStatements']) as $debugStatement) {
                    // get template name, line number, and code to insert from the line
                    $statements = explode("|", $debugStatement);
                    //if this is not the template specified on the line of debugStatement, then skip
                    if(wire('page')->template->name != $statements[0]) continue;
                    // add conditional to make sure debug statements left in compiled templates are not
                    // executed if Tracy is uninstalled or the debugStatements field in the config settings is blank
                    $code = "if(class_exists('\TracyDebugger') && wire('user')->isSuperuser() && \TracyDebugger::getDataValue('debugStatements')) {" . $statements[2] . "}";
                    if(isset($statements[3]) && $statements[3]=='true') $code = "<?php "  . $code . " ?>";
                    array_splice($lines, ($statements[1]+$i), 0, $code);
                    $i++;
                }
                $event->return = implode("\n", $lines);
            }
        }
    }


    public function setTemplateVars($event) {

        if(wire('config')->version < 3) return false;

        //remove trailing whitespace and any existing closing php tag
        //add call to populate wire("templateVars")
        //only for filename which matches the name of the template for this page
        if ($event['arguments'][1] == wire('page')->template->filename) {
            $out = rtrim($event->return);
            $pos = strrpos($out, '<?');
            $lastPhpTag = $pos === false ? $out : substr($out, $pos + 1);

            if (strpos($lastPhpTag, '?>') !== false) {
                $closeTag = '';
            }
            else {
                $closeTag = '?>';
            }

            $event->return = $out . $closeTag . "\n<?php\nif(class_exists('\TracyDebugger')) {\n\t\TracyDebugger::".'$templateVars'." = \TracyDebugger::templateVars(get_defined_vars());\n}";
        }
    }


    /**
     * Helper function to remove PW variables from get_defined_vars() call.
     */
    public static function templateVars($vars) {

        if(wire('config')->version < 3) return false;

        $pwVars = array('fuel','options');
        foreach(wire('fuel') as $key => $value) {
            if(!is_object($value)) continue;
            $pwVars[] = $key;
        }

        $nonPwVars = $vars;
        foreach($vars as $key => $var) {
            if(is_object($var) || is_array($var)) {
                if(in_array($key, $pwVars)) unset($nonPwVars[$key]);
            }
        }

        unset($nonPwVars['templateVars']);
        unset($nonPwVars['pwVars']);
        unset($nonPwVars['key']);
        unset($nonPwVars['value']);
        unset($nonPwVars['p']);
        unset($nonPwVars['ps']);

        return $nonPwVars;

    }


    /**
     * Helper function to insert generated time for a panel.
     */
    public static function generatedTime($seconds) {
        return '<p style="font-size:9px !important; text-align:left !important"><br />Panel generated in '.round($seconds, 4).' seconds</p>';
    }


    /**
     * Helper function to convert remote path to local path.
     */
    public static function makePathLocal($path) {
        if(self::getDataValue('localRootPath') != '') $path = str_replace(wire('config')->paths->root, self::getDataValue('localRootPath'), $path);
        return $path;
    }


    /**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        if(wire('input')->post->clearEmailSent) {
            $emailSentPath = wire('config')->paths->logs.'tracy/email-sent';
            if(file_exists($emailSentPath)) {
                $removed = unlink($emailSentPath);
            }
            if (!isset($removed) || !$removed) wire()->error( __('No file to remove'));
            else wire()->message(__("email-sent file deleted successfully"));
        }

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'enabled');
        $f->label = __('Enable Tracy Debugger', __FILE__);
        $f->description = __('Uncheck to disable the Tracy Debugger.'."\n".'For more details on the settings below:'."\n".'[TracyDebugger Blog: Docs and Tutorial](https://processwire.com/blog/posts/introducing-tracy-debugger/)'."\n".'[Tracy Docs](https://tracy.nette.org/)', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['enabled'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldSelect");
        $f->attr('name', 'coreBranch');
        $f->label = 'Core Tracy Branch';
        $f->description = __('Which version of the Tracy core to use. Master (dev) requires PHP 5.4.4+ and will be automatically selected if your PHP version is sufficient.', __FILE__);
        $f->columnWidth = 50;
        $f->required = true;
        $f->addOption('master', 'Master');
        $f->addOption('legacy', 'Legacy (for PHP < 5.4.4)');
        if($data['coreBranch']) $f->attr('value', $data['coreBranch']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'allowLogProduction');
        $f->label = __('Allow Logging in Production Mode', __FILE__);
        $f->description = __('Allows logging for all users in PRODUCTION mode, regardless of any other settings (ie "tracy-debugger" permission and IP Address restriction).', __FILE__);
        $f->notes = __('The DebugBar will be hidden, and all errors/warnings, and dumps etc will be sent to log files. The is safe for production and is the best option if you want Tracy to handle capturing and logging everything. RECOMMENDED!', __FILE__);
        $f->columnWidth = 33;
        $f->attr('checked', $data['allowLogProduction'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'superuserForceDevelopment');
        $f->label = __('Superuser Force Development Mode', __FILE__);
        $f->description = __('Check to force DEVELOPMENT mode for superusers even on live sites.', __FILE__);
        $f->notes = __('By default, the Output Mode setting\'s DETECT option will force a site into PRODUCTION mode when it is live, which hides the DebugBar and sends errors and dumps to log files. However, with this checked, Superusers will always be in DEVELOPMENT mode.', __FILE__);
        $f->columnWidth = 34;
        $f->attr('checked', $data['superuserForceDevelopment'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'ipAddress');
        $f->label = __('Restrict Non-superusers', __FILE__);
        $f->description = __('IP Address that non-superusers need to use TracyDebugger. Enter IP address or a PCRE regular expression to match IP address of user, eg. /^123\.456\.789\./ would match all IP addresses that started with 123.456.789.', __FILE__);
        $f->columnWidth = 33;
        $f->notes = __('Non-superusers are already blocked unless they have the "tracy-debugger" permission. But once a user has been given the permission, this option restricts access to the listed IP address. Highly recommended for debugging live sites that you have manually set into DEVELOPMENT mode.', __FILE__);
        if($data['ipAddress']) $f->attr('value', $data['ipAddress']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'strictMode');
        $f->label = __('Strict Mode', __FILE__);
        $f->description = __('Check to enable strict mode which displays notices and warnings like errors.', __FILE__);
        $f->columnWidth = 33;
        $f->attr('checked', $data['strictMode'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'forceScream');
        $f->label = __('Force Scream', __FILE__);
        $f->description = __('Check to force "scream" of mode which disables the @ (shut-up) operator so that notices and warnings are no longer hidden.', __FILE__);
        $f->notes = __('This is disabled when Strict Mode is enabled because of a bug? [https://forum.nette.org/en/25569-strict-and-scream-modes-together](https://forum.nette.org/en/25569-strict-and-scream-modes-together) in the core Tracy package.', __FILE__);
        $f->showIf="strictMode!='1'";
        $f->columnWidth = 34;
        $f->attr('checked', $data['forceScream'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldSelect");
        $f->attr('name', 'outputMode');
        $f->label = 'Output Mode';
        $f->description = __('The DETECT option automatically switches from DEVELOPMENT to PRODUCTION mode based on whether the IP of the site is publicly accessible or not.', __FILE__);
        $f->notes = __('In PRODUCTION mode, all errors and dumps etc are logged to file. Nothing is displayed in the browser.', __FILE__);
        $f->columnWidth = 33;
        $f->required = true;
        $f->addOption('detect', 'DETECT');
        $f->addOption('development', 'DEVELOPMENT');
        $f->addOption('production', 'PRODUCTION');
        if($data['outputMode']) $f->attr('value', $data['outputMode']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'showDebugBar');
        $f->label = __('Show Debug Bar', __FILE__);
        $f->description = __('Show the debug bar.', __FILE__);
        $f->columnWidth = 33;
        $f->addOption('frontend', 'Frontend');
        $f->addOption('backend', 'Backend');
        if($data['showDebugBar']) $f->attr('value', $data['showDebugBar']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldAsmSelect");
        $f->attr('name', 'showPanels');
        $f->label = __('Show Panels', __FILE__);
        $f->description = __('Determines which panels are shown on the Debug Bar. Sort to match order of panels in Debugger Bar.', __FILE__);
        $f->columnWidth = 34;
        foreach(static::$allPanels as $name => $label) {
            $f->addOption($name, $label);
        }
        if($data['showPanels']) $f->attr('value', $data['showPanels']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showPanelLabels');
        $f->label = __('Show Panel Labels', __FILE__);
        $f->description = __('Show the labels next to each panel.', __FILE__);
        $f->notes = __('Unchecking this will make the debugger bar much more compact.', __FILE__);
        $f->columnWidth = 33;
        $f->attr('checked', $data['showPanelLabels'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'showLocation');
        $f->label = 'Show Location';
        $f->description = __('Shows the location of dump() and barDump() calls.', __FILE__);
        $f->notes = __('LOCATION_SOURCE adds tooltip with path to the file, where the function was called.'."\n".'LOCATION_LINK adds a link to the file.'."\n".'LOCATION_CLASS adds a tooltip to every dumped object containing path to the file, in which the object\'s class is defined.');
        $f->columnWidth = 50;
        $f->addOption('Tracy\Dumper::LOCATION_SOURCE', 'LOCATION_SOURCE');
        $f->addOption('Tracy\Dumper::LOCATION_LINK', 'LOCATION_LINK');
        $f->addOption('Tracy\Dumper::LOCATION_CLASS', 'LOCATION_CLASS');
        if($data['showLocation']) $f->attr('value', $data['showLocation']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'logSeverity');
        $f->label = 'Log Severity';
        $f->description = __('If you want Tracy to log PHP errors like E_NOTICE or E_WARNING with detailed information (HTML report), set them here.', __FILE__);
        $f->notes = __('These only affect log file content, not onscreen debug info.');
        $f->columnWidth = 50;
        $f->addOption('E_ERROR', 'E_ERROR');
        $f->addOption('E_WARNING', 'E_WARNING');
        $f->addOption('E_PARSE', 'E_PARSE');
        $f->addOption('E_NOTICE', 'E_NOTICE');
        $f->addOption('E_CORE_ERROR', 'E_CORE_ERROR');
        $f->addOption('E_CORE_WARNING', 'E_CORE_WARNING');
        $f->addOption('E_COMPILE_ERROR', 'E_COMPILE_ERROR');
        $f->addOption('E_COMPILE_WARNING', 'E_COMPILE_WARNING');
        $f->addOption('E_USER_ERROR', 'E_USER_ERROR');
        $f->addOption('E_USER_WARNING', 'E_USER_WARNING');
        $f->addOption('E_USER_NOTICE', 'E_USER_NOTICE');
        $f->addOption('E_STRICT', 'E_STRICT');
        $f->addOption('E_RECOVERABLE_ERROR', 'E_RECOVERABLE_ERROR');
        $f->addOption('E_DEPRECATED', 'E_DEPRECATED');
        $f->addOption('E_USER_DEPRECATED', 'E_USER_DEPRECATED');
        $f->addOption('E_ALL', 'E_ALL');
        if($data['logSeverity']) $f->attr('value', $data['logSeverity']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'numLogEntries');
        $f->label = __('Number of Log Entries', __FILE__);
        $f->description = __('Set the number of log entries to be displayed for the Tracy and ProcessWire log viewer panels.', __FILE__);
        $f->notes = __('Default: 10.', __FILE__);
        $f->columnWidth = 33;
        $f->attr('value', $data['numLogEntries']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'maxDepth');
        $f->label = __('Maximum Nesting Depth', __FILE__);
        $f->description = __('Set the maximum nesting depth of dumped arrays and objects.', __FILE__);
        $f->notes = __('Default: 3. Warning: making this too large can slow your page load down or even crash your browser.', __FILE__);
        $f->columnWidth = 34;
        $f->attr('value', $data['maxDepth']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'maxLength');
        $f->label = __('Maximum String Length', __FILE__);
        $f->description = __('Set the maximum displayed strings length.', __FILE__);
        $f->notes = __('Default: 150.', __FILE__);
        $f->columnWidth = 33;
        $f->attr('value', $data['maxLength']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldEmail");
        $f->attr('name', 'email');
        $f->label = __('Email for production errors', __FILE__);
        $f->description = __('Receive emails at this address when an error occurs in production mode.', __FILE__);
        $f->columnWidth = 66;
        if($data['email']) $f->attr('value', $data['email']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'clearEmailSent');
        $f->label = __('Clear Email Sent Flag', __FILE__);
        $f->description = __('Check and save settings to remove the "email-sent" file so that you will start receiving new error emails.', __FILE__);
        $f->showIf = "email!=''";
        $f->columnWidth = 34;
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'editor');
        $f->label = __('Editor Protocol Handler', __FILE__);
        $f->description = __('Sets the Tracy `Debugger::$editor` variable. Enter the appropriate address to open your code editor of choice.'."\n".'This approach only works for OSX. For more instructions on Windows and Linux alternatives, [read here](https://pla.nette.org/en/how-open-files-in-ide-from-debugger).'."\n".'For easily adding the SublimeText "subl://" protocol handler to your Mac, use this free [tool](https://github.com/saetia/sublime-url-protocol-mac).', __FILE__);
        $f->notes = __('Initially configured for SublimeText (`subl://open/?url=file://%file&line=%line`). Change to work with your favorite editor.', __FILE__);
        $f->columnWidth = 50;
        if($data['editor']) $f->attr('value', $data['editor']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'localRootPath');
        $f->label = __('Local Root Path', __FILE__);
        $f->description = __('This will map editor links from a production site to your local dev files.', __FILE__);
        $f->notes = __('An example path might be: /Users/myname/Sites/sitefolder/', __FILE__);
        $f->columnWidth = 50;
        if($data['localRootPath']) $f->attr('value', $data['localRootPath']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'enableShortcutMethods');
        $f->label = __('Enable Shortcut Methods', __FILE__);
        $f->description = __('Uncheck to not define any of the shortcut methods. If you are not going to use these in your templates, unchecking means that they will not be defined which may reduce possible future name clashes. If in doubt, uncheck and use the full methods:'."\n".'TD::debugAll()'."\n".'TD::dump()'."\n".'TD::barDump()'."\n".'TD::log()'."\n".'TD::timer()'."\n".'TD::fireLog()'."\n".'TD::addBreakpoint()'."\n".'TD::templateVars()', __FILE__);
        $f->notes = __('If this, or one of the shortcut methods is not enabled, but is called in your templates, all users will get a "call to undefined function" fatal error, so please be aware when using the shortcut methods in your templates if they are not enabled here.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['enableShortcutMethods'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'enabledShortcutMethods');
        $f->label = __('Enabled Shortcut Methods', __FILE__);
        $f->description = __('Uncheck any shortcuts/aliases to methods that you do not want available.', __FILE__);
        $f->notes = __('Useful if any of these functions/methods are defined elswhere in your site and you are getting a "previously declared" fatal error.', __FILE__);
        $f->showIf = "enableShortcutMethods=1";
        $f->columnWidth = 50;
        $f->addOption('debugAll', 'debugAll() for TD::debugAll()');
        $f->addOption('da', 'da() for TD::debugAll()');
        $f->addOption('dump', 'dump() for TD::dump()');
        $f->addOption('d', 'd() for TD::dump()');
        $f->addOption('barDump', 'barDump() for TD::barDump()');
        $f->addOption('bd', 'bd() for TD::barDump()');
        $f->addOption('l', 'l() for TD::log()');
        $f->addOption('timer', 'timer() for TD::timer()');
        $f->addOption('t', 't() for TD::timer()');
        $f->addOption('fireLog', 'fireLog() for TD::fireLog()');
        $f->addOption('fl', 'fl() for TD::fireLog()');
        $f->addOption('addBreakpoint', 'addBreakpoint() for TD::addBreakpoint()');
        $f->addOption('bp', 'bp() for TD::addBreakpoint()');
        $f->addOption('templateVars', 'templateVars() for TD::templateVars()');
        $f->addOption('tv', 'tv() for TD::templateVars()');
        if($data['enabledShortcutMethods']) $f->attr('value', $data['enabledShortcutMethods']);
        $wrapper->add($f);

        if(wire('config')->version >= 3 && wire('config')->templateCompile !== false) {
            $f = wire('modules')->get("InputfieldTextarea");
            $f->attr('name', 'debugStatements');
            $f->label = __('Debug Statements', __FILE__);
            $f->description = __('These statements will be inserted into the compiled version of template files at runtime. Empty this field to remove debug statements.'."\n".'Format one statement per line with: template_name|line_number|debug_statement|php_tags(bool). Note the last element is optional and determines whether the statement should start and end with open (<?php) and close (?>) tags.'."\n\n".'eg. basic_page|23|bd($testVariable);|true', __FILE__);
            $f->notes = __('This is useful for quickly debugging a live site without needing to edit the remote files.', __FILE__);
            if($data['debugStatements']) $f->attr('value', $data['debugStatements']);
            $wrapper->add($f);
        }

        return $wrapper;
    }

    /**
     * Getter function to get a $data index value
     */
    public static function getDataValue($property) {
        if(is_array(self::$_data->$property)) {
            return self::$_data->$property;
        }
        else {
            return trim(self::$_data->$property);
        }
    }

    /**
    * Determine if Tracy is loading an additional panel - via AJAX, or a redirect panel
    * In this case we don't want to add most of our custom panels to the new bar because they don't change
    */
    public static function additionalBar() {
        $isRedirect = preg_match('#^Location:#im', implode("\n", headers_list()));
        if((static::$tracyVersion != 'legacy' && Helpers::isAjax()) || $isRedirect) {
            return true;
        }
        else {
            return false;
        }
    }

    public static function checkIpAddress() {

        $ipAddress = static::getDataValue('ipAddress');
        $ipAddressAllowed = null;

        if($ipAddress != '') {
            if(strpos($ipAddress, '/') === 0) $ipAddressAllowed = (bool) @preg_match($ipAddress, $_SERVER['REMOTE_ADDR']); // regex IPs
                else $ipAddressAllowed = $ipAddress === $_SERVER['REMOTE_ADDR']; // exact IP match
        }
        return array('ipAddress' => $ipAddress, 'ipAddressAllowed' => $ipAddressAllowed);
    }


    public static function allowedTracyUsers($u = null) {

        $u = $u ? $u : wire('user');

        //allow Tracy to log to file for guest users when in production mode (not in development mode)
        if(static::getDataValue('allowLogProduction') == 1 && static::getDataValue('outputMode') != 'development') {
            return true;
        }
        elseif($u->isSuperuser()) {
            return true;
        }
        else {
            $checkIpAddress = static::checkIpAddress();
            if($checkIpAddress['ipAddress'] != '' && $u->hasPermission('tracy-debugger')) {
                return $checkIpAddress['ipAddressAllowed'];
            }
            elseif($u->hasPermission('tracy-debugger')) {
                return true;
            }
            else {
                return false;
            }
        }
    }


    public function __destruct() {
        if(isset($_POST['tracyPwVersion']) && $_POST['tracyPwVersion'] != $this->config->version) {
            $rootPath = $this->config->paths->root;
            // rename wire
            rename($rootPath.'wire', $rootPath.'.wire-'.$this->config->version);
            rename($rootPath.'.wire-'.$_POST['tracyPwVersion'], $rootPath.'wire');
            // rename .htaccess if previously replaced
            if(file_exists($rootPath.'.htaccess-'.$_POST['tracyPwVersion'])) {
                rename($rootPath.'.htaccess', $rootPath.'.htaccess-'.$this->config->version);
                rename($rootPath.'.htaccess-'.$_POST['tracyPwVersion'], $rootPath.'.htaccess');
            }
            // rename index.php if previously replaced
            if(file_exists($rootPath.'.index-'.$_POST['tracyPwVersion'].'.php')) {
                rename($rootPath.'index.php', $rootPath.'.index-'.$this->config->version.'.php');
                rename($rootPath.'.index-'.$_POST['tracyPwVersion'].'.php', $rootPath.'index.php');
            }
        }

        // delete temporary template file after it's been rendered
        // this is from the Template Editor panel
        if(isset($this->tempTemplateFilename) && file_exists($this->tempTemplateFilename)) unlink($this->tempTemplateFilename);
    }


    public function ___upgrade() {
        if(!wire('modules')->isInstalled('ProcessTracyConsole')) wire('modules')->get('ProcessTracyConsole');
    }

}

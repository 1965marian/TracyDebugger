<?php

/**
 * Processwire module for running the Tracy debugger from Nette.
 * by Adrian Jones
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 *
 * A big thanks to Roland Toth (https://github.com/rolandtoth/) for the idea for this module
 * and for significant feedback, testing, and feature suggestions.
 *
 */

use Tracy\Debugger;

class TracyDebugger extends WireData implements Module, ConfigurableModule {

    /**
     * Basic information about module
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Tracy Debugger',
            'summary' => 'Tracy debugger from Nette.',
            'href' => 'https://processwire.com/talk/topic/12208-tracy-debugger/',
            'version' => 41,
            'autoload' => true,
            'singular' => true,
            'icon' => 'bug'
        );
    }


    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "enabled" => 1,
                "strictMode" => null,
                "forceScream" => null,
                "outputMode" => 'detect',
                "showLocation" => array('Tracy\Dumper::LOCATION_SOURCE', 'Tracy\Dumper::LOCATION_LINK', 'Tracy\Dumper::LOCATION_CLASS'),
                "maxDepth" => 3,
                "maxLength" => 150,
                "showDebugBar" => 'frontend',
                "showPerformancePanel" => 1,
                "showPWPanel" => 1,
                "showPWLogsPanel" => 1,
                "showMethodsPanel" => 1,
                "showDebugModeIndicator" => 1,
                "email" => '',
                "clearEmailSent" => null,
                "enableShortcutMethods" => 1,
                "enabledShortcutMethods" => array('dump', 'd', 'barDump', 'bd', 'l', 'timer', 't', 'fireLog', 'fl', 'addBreakpoint', 'bp')
            );
    }


    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }

    /**
     * Initialize the module and setup hooks
     */
    public function init() {

        // if user not allowed then load dummy class to prevent "class not found" errors when
        // calling \Tracy\Debugger::method() directly
        if(allowedTracyUsers()) {
            require_once __DIR__ . '/tracy/src/tracy.php';
        }
        else {
            require_once __DIR__ . '/DummyTracyDebuggerClass.inc';
        }

        require_once __DIR__ . '/TDClass.inc';

        if($this->data['enableShortcutMethods']) {
            require_once __DIR__ . '/ShortcutMethods.inc';
        }

        // now that required classes above have been loaded if requested, we exit now
        // if enabled unchecked, or user not allowed
        if(!$this->data['enabled'] || !allowedTracyUsers()) return;

        if($this->data['outputMode'] == 'production') {
            $outputMode = Debugger::PRODUCTION;
        }
        elseif($this->data['outputMode'] == 'development') {
            $outputMode = Debugger::DEVELOPMENT;
        }
        else {
            $outputMode = Debugger::DETECT;
        }

        $logFolder = $this->wire('config')->paths->logs.'tracy';
        if(!is_dir($logFolder)) wireMkdir($logFolder);

        Debugger::enable($outputMode, $logFolder, $this->data['email'] != '' ? $this->data['email'] : null);

        //convert checked location strings to constants and array_reduce to bitwise OR (|) line
        $locations = array_map('constant', $this->data['showLocation']);
        Debugger::$showLocation = array_reduce($locations, function($a, $b) { return $a | $b; }, 0);

        Debugger::$maxDepth = $this->data['maxDepth'];
        Debugger::$maxLen = $this->data['maxLength'];
        Debugger::$strictMode = $this->data['strictMode'] ? TRUE : FALSE;
        Debugger::$scream = $this->data['forceScream'] ? TRUE : FALSE;

        if($this->data['showPerformancePanel']) {
            require_once __DIR__ . '/PerformancePanel/Panel.php';
            require_once __DIR__ . '/PerformancePanel/Register.php';
            Debugger::getBar()->addPanel(new Zarganwar\PerformancePanel\Panel);
        }

        if($this->data['showPWPanel']) {
            require_once __DIR__ . '/ProcesswirePanel.inc';
            Debugger::getBar()->addPanel(new ProcessWirePanel);
        }

        //TODO - maybe coming soon if I can manage to get the variables from the correct scope
        //require_once __DIR__ . '/VariablesPanel.inc';
        //Debugger::getBar()->addPanel(new VariablesPanel);


        if($this->data['showPWLogsPanel']) {
            require_once __DIR__ . '/PWLogsPanel.inc';
            Debugger::getBar()->addPanel(new PWLogsPanel);
        }

        if($this->data['showMethodsPanel']) {
            require_once __DIR__ . '/MethodsInfoPanel.inc';
            Debugger::getBar()->addPanel(new MethodsInfoPanel);
        }

        if(wire('config')->debug === true) {
            require_once __DIR__ . '/DebugModePanel.inc';
            Debugger::getBar()->addPanel(new DebugModePanel);
        }

        require_once __DIR__ . '/AllowedUsersPanel.inc';
        Debugger::getBar()->addPanel(new AllowedUsersPanel);

    }

    public function ready() {

        // if enabled unchecked, or user not allowed
        if(!$this->data['enabled'] || !allowedTracyUsers()) return;

        if(is_array($this->data['showDebugBar'])) {
            if(wire('page')->template == "admin") {
                if(in_array('backend', $this->data['showDebugBar'])) {
                    Debugger::$showBar = true;
                }
                else {
                    Debugger::$showBar = false;
                }
            }
            if(wire('page')->template != "admin") {
                if(in_array('frontend', $this->data['showDebugBar'])) {
                    Debugger::$showBar = true;
                }
                else {
                    Debugger::$showBar = false;
                }
            }
        }
        // backwards compatible to versions < 0.2.8 when it was a single checkbox
        else {
            Debugger::$showBar = $this->data['showDebugBar'] ? true : false;
        }
    }


    /**
     * Return an InputfieldWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        if(wire('input')->post->clearEmailSent) {
            $emailSentPath = wire('config')->paths->logs.'tracy/email-sent';
            if(file_exists($emailSentPath)) {
                $removed = unlink($emailSentPath);
            }
            if (!isset($removed) || !$removed) wire()->error( __('No file to remove'));
            else wire()->message(__("email-sent file deleted successfully"));
        }

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'enabled');
        $f->label = __('Enable Tracy Debugger', __FILE__);
        $f->description = __('Uncheck to disable the Tracy Debugger. For more details on Tracy and the settings below, see: [https://doc.nette.org/en/2.3/debugging](https://doc.nette.org/en/2.3/debugging)', __FILE__);
        $f->attr('checked', $data['enabled'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'strictMode');
        $f->label = __('Strict Mode', __FILE__);
        $f->description = __('Check to enable strict mode which displays notices and warnings like errors.', __FILE__);
        $f->columnWidth = 33;
        $f->attr('checked', $data['strictMode'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'forceScream');
        $f->label = __('Force Scream', __FILE__);
        $f->description = __('Check to force "scream" of mode which disables the @ (shut-up) operator so that notices and warnings are no longer hidden.', __FILE__);
        $f->notes = __('This is disabled when Strict Mode is enabled because of a bug? [https://forum.nette.org/en/25569-strict-and-scream-modes-together](https://forum.nette.org/en/25569-strict-and-scream-modes-together) in the core Tracy package.', __FILE__);
        $f->showIf="strictMode!='1'";
        $f->columnWidth = 34;
        $f->attr('checked', $data['forceScream'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldSelect");
        $f->attr('name', 'outputMode');
        $f->label = 'Output Mode';
        $f->description = __('The DETECT option automatically switches from DEVELOPMENT to PRODUCTION mode based on whether the IP of the site is publicly accessible or not.', __FILE__);
        $f->columnWidth = 33;
        $f->required = true;
        $f->addOption('detect', 'DETECT');
        $f->addOption('development', 'DEVELOPMENT');
        $f->addOption('production', 'PRODUCTION');
        if($data['outputMode']) $f->attr('value', $data['outputMode']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'showLocation');
        $f->label = 'Show Location';
        $f->description = __('Shows the location of dump() and barDump() calls.', __FILE__);
        $f->notes = __('LOCATION_SOURCE adds tooltip with path to the file, where the function was called. LOCATION_LINK adds a link to the file. LOCATION_CLASS adds a tooltip to every dumped object containing path to the file, in which the object\'s class is defined.');
        $f->columnWidth = 33;
        $f->addOption('Tracy\Dumper::LOCATION_SOURCE', 'LOCATION_SOURCE');
        $f->addOption('Tracy\Dumper::LOCATION_LINK', 'LOCATION_LINK');
        $f->addOption('Tracy\Dumper::LOCATION_CLASS', 'LOCATION_CLASS');
        if($data['showLocation']) $f->attr('value', $data['showLocation']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'maxDepth');
        $f->label = __('Maximum Nesting Depth', __FILE__);
        $f->description = __('Set the maximum nesting depth of dumped arrays and objects.', __FILE__);
        $f->notes = __('Default: 3. Warning: making this too large can slow your page load down or even crash your browser.', __FILE__);
        $f->columnWidth = 34;
        $f->attr('value', $data['maxDepth']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldInteger");
        $f->attr('name', 'maxLength');
        $f->label = __('Maximum String Length', __FILE__);
        $f->description = __('Set the maximum displayed strings length.', __FILE__);
        $f->notes = __('Default: 150.', __FILE__);
        $f->columnWidth = 33;
        $f->attr('value', $data['maxLength']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'showDebugBar');
        $f->label = __('Show Debug Bar', __FILE__);
        $f->description = __('Uncheck to hide the debug bar.', __FILE__);
        $f->columnWidth = 20;
        $f->addOption('frontend', 'Frontend');
        $f->addOption('backend', 'Backend');
        if($data['showDebugBar']) $f->attr('value', $data['showDebugBar']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showPerformancePanel');
        $f->label = __('Show Performance Panel', __FILE__);
        $f->description = __('Uncheck to hide the Performace panel from the debug bar.', __FILE__);
        $f->showIf = "showDebugBar=frontend|backend";
        $f->columnWidth = 20;
        $f->attr('checked', $data['showPerformancePanel'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showPWPanel');
        $f->label = __('Show ProcessWire Panel', __FILE__);
        $f->description = __('Uncheck to hide the ProcessWire panel from the debug bar.', __FILE__);
        $f->showIf = "showDebugBar=frontend|backend";
        $f->columnWidth = 20;
        $f->attr('checked', $data['showPWPanel'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showPWLogsPanel');
        $f->label = __('Show PW Logs Panel', __FILE__);
        $f->description = __('Uncheck to hide the PW Logs panel from the debug bar.', __FILE__);
        $f->showIf = "showDebugBar=frontend|backend";
        $f->columnWidth = 20;
        $f->attr('checked', $data['showPWLogsPanel'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'showMethodsPanel');
        $f->label = __('Show Methods Info Panel', __FILE__);
        $f->description = __('Uncheck to hide the Methods Info panel from the debug bar.', __FILE__);
        $f->showIf = "showDebugBar=frontend|backend";
        $f->columnWidth = 20;
        $f->attr('checked', $data['showMethodsPanel'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldEmail");
        $f->attr('name', 'email');
        $f->label = __('Email for production errors', __FILE__);
        $f->description = __('Receive emails at this address when an error occurs in production mode.', __FILE__);
        $f->columnWidth = 66;
        if($data['email']) $f->attr('value', $data['email']);
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'clearEmailSent');
        $f->label = __('Clear Email Sent Flag', __FILE__);
        $f->description = __('Check and save settings to remove the "email-sent" file so that you will start receiving new error emails.', __FILE__);
        $f->showIf = "email!=''";
        $f->columnWidth = 34;
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'enableShortcutMethods');
        $f->label = __('Enable Shortcut Methods', __FILE__);
        $f->description = __('Uncheck to not define any of the shortcut methods. If you are not going to use these in your templates, unchecking means that they will not be defined which may reduce possible future name clashes. If in doubt, uncheck and use the full methods:'."\n".'TD:: dump()'."\n".'TD:: barDump()'."\n".'TD::log()'."\n".'TD:: timer()'."\n".'TD:: fireLog()'."\n".'TD:: addBreakpoint()', __FILE__);
        $f->notes = __('If this, or one of the shortcut methods is not enabled, but is called in your templates, all users will get a "call to undefined function" fatal error, so please be aware when using the shortcut methods in your templates if they are not enabled here.', __FILE__);
        $f->columnWidth = 50;
        $f->attr('checked', $data['enableShortcutMethods'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'enabledShortcutMethods');
        $f->label = __('Enabled Shortcut Methods', __FILE__);
        $f->description = __('Uncheck any shortcuts/aliases to methods that you do not want available.', __FILE__);
        $f->notes = __('Useful if any of these functions/methods are defined elswhere in your site and you are getting a "previously declared" fatal error.', __FILE__);
        $f->showIf = "enableShortcutMethods=1";
        $f->columnWidth = 50;
        $f->addOption('dump', 'dump() for TD::dump()');
        $f->addOption('d', 'd() for TD::dump()');
        $f->addOption('barDump', 'barDump() for TD::barDump()');
        $f->addOption('bd', 'bd() for TD::barDump()');
        $f->addOption('l', 'l() for TD::log()');
        $f->addOption('timer', 'timer() for TD::timer()');
        $f->addOption('t', 't() for TD::timer()');
        $f->addOption('fireLog', 'fireLog() for TD::fireLog()');
        $f->addOption('fl', 'fl() for TD::fireLog()');
        $f->addOption('addBreakpoint', 'addBreakpoint() for TD::addBreakpoint()');
        $f->addOption('bp', 'bp() for TD::addBreakpoint()');
        if($data['enabledShortcutMethods']) $f->attr('value', $data['enabledShortcutMethods']);
        $wrapper->add($f);

        return $wrapper;
    }

}

function allowedTracyUsers($u = null) {
    $u = $u ? $u : wire('user');
    if($u->isSuperuser() || $u->hasPermission('tracy-debugger')) {
        return true;
    }
    else {
        return false;
    }
}
